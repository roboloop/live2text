// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package recognition

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TaskFactoryMock implements TaskFactory
type TaskFactoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNewTask          func(device string, language string) (tp1 *Task)
	funcNewTaskOrigin    string
	inspectFuncNewTask   func(device string, language string)
	afterNewTaskCounter  uint64
	beforeNewTaskCounter uint64
	NewTaskMock          mTaskFactoryMockNewTask
}

// NewTaskFactoryMock returns a mock for TaskFactory
func NewTaskFactoryMock(t minimock.Tester) *TaskFactoryMock {
	m := &TaskFactoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewTaskMock = mTaskFactoryMockNewTask{mock: m}
	m.NewTaskMock.callArgs = []*TaskFactoryMockNewTaskParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTaskFactoryMockNewTask struct {
	optional           bool
	mock               *TaskFactoryMock
	defaultExpectation *TaskFactoryMockNewTaskExpectation
	expectations       []*TaskFactoryMockNewTaskExpectation

	callArgs []*TaskFactoryMockNewTaskParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TaskFactoryMockNewTaskExpectation specifies expectation struct of the TaskFactory.NewTask
type TaskFactoryMockNewTaskExpectation struct {
	mock               *TaskFactoryMock
	params             *TaskFactoryMockNewTaskParams
	paramPtrs          *TaskFactoryMockNewTaskParamPtrs
	expectationOrigins TaskFactoryMockNewTaskExpectationOrigins
	results            *TaskFactoryMockNewTaskResults
	returnOrigin       string
	Counter            uint64
}

// TaskFactoryMockNewTaskParams contains parameters of the TaskFactory.NewTask
type TaskFactoryMockNewTaskParams struct {
	device   string
	language string
}

// TaskFactoryMockNewTaskParamPtrs contains pointers to parameters of the TaskFactory.NewTask
type TaskFactoryMockNewTaskParamPtrs struct {
	device   *string
	language *string
}

// TaskFactoryMockNewTaskResults contains results of the TaskFactory.NewTask
type TaskFactoryMockNewTaskResults struct {
	tp1 *Task
}

// TaskFactoryMockNewTaskOrigins contains origins of expectations of the TaskFactory.NewTask
type TaskFactoryMockNewTaskExpectationOrigins struct {
	origin         string
	originDevice   string
	originLanguage string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNewTask *mTaskFactoryMockNewTask) Optional() *mTaskFactoryMockNewTask {
	mmNewTask.optional = true
	return mmNewTask
}

// Expect sets up expected params for TaskFactory.NewTask
func (mmNewTask *mTaskFactoryMockNewTask) Expect(device string, language string) *mTaskFactoryMockNewTask {
	if mmNewTask.mock.funcNewTask != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by Set")
	}

	if mmNewTask.defaultExpectation == nil {
		mmNewTask.defaultExpectation = &TaskFactoryMockNewTaskExpectation{}
	}

	if mmNewTask.defaultExpectation.paramPtrs != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by ExpectParams functions")
	}

	mmNewTask.defaultExpectation.params = &TaskFactoryMockNewTaskParams{device, language}
	mmNewTask.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmNewTask.expectations {
		if minimock.Equal(e.params, mmNewTask.defaultExpectation.params) {
			mmNewTask.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNewTask.defaultExpectation.params)
		}
	}

	return mmNewTask
}

// ExpectDeviceParam1 sets up expected param device for TaskFactory.NewTask
func (mmNewTask *mTaskFactoryMockNewTask) ExpectDeviceParam1(device string) *mTaskFactoryMockNewTask {
	if mmNewTask.mock.funcNewTask != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by Set")
	}

	if mmNewTask.defaultExpectation == nil {
		mmNewTask.defaultExpectation = &TaskFactoryMockNewTaskExpectation{}
	}

	if mmNewTask.defaultExpectation.params != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by Expect")
	}

	if mmNewTask.defaultExpectation.paramPtrs == nil {
		mmNewTask.defaultExpectation.paramPtrs = &TaskFactoryMockNewTaskParamPtrs{}
	}
	mmNewTask.defaultExpectation.paramPtrs.device = &device
	mmNewTask.defaultExpectation.expectationOrigins.originDevice = minimock.CallerInfo(1)

	return mmNewTask
}

// ExpectLanguageParam2 sets up expected param language for TaskFactory.NewTask
func (mmNewTask *mTaskFactoryMockNewTask) ExpectLanguageParam2(language string) *mTaskFactoryMockNewTask {
	if mmNewTask.mock.funcNewTask != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by Set")
	}

	if mmNewTask.defaultExpectation == nil {
		mmNewTask.defaultExpectation = &TaskFactoryMockNewTaskExpectation{}
	}

	if mmNewTask.defaultExpectation.params != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by Expect")
	}

	if mmNewTask.defaultExpectation.paramPtrs == nil {
		mmNewTask.defaultExpectation.paramPtrs = &TaskFactoryMockNewTaskParamPtrs{}
	}
	mmNewTask.defaultExpectation.paramPtrs.language = &language
	mmNewTask.defaultExpectation.expectationOrigins.originLanguage = minimock.CallerInfo(1)

	return mmNewTask
}

// Inspect accepts an inspector function that has same arguments as the TaskFactory.NewTask
func (mmNewTask *mTaskFactoryMockNewTask) Inspect(f func(device string, language string)) *mTaskFactoryMockNewTask {
	if mmNewTask.mock.inspectFuncNewTask != nil {
		mmNewTask.mock.t.Fatalf("Inspect function is already set for TaskFactoryMock.NewTask")
	}

	mmNewTask.mock.inspectFuncNewTask = f

	return mmNewTask
}

// Return sets up results that will be returned by TaskFactory.NewTask
func (mmNewTask *mTaskFactoryMockNewTask) Return(tp1 *Task) *TaskFactoryMock {
	if mmNewTask.mock.funcNewTask != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by Set")
	}

	if mmNewTask.defaultExpectation == nil {
		mmNewTask.defaultExpectation = &TaskFactoryMockNewTaskExpectation{mock: mmNewTask.mock}
	}
	mmNewTask.defaultExpectation.results = &TaskFactoryMockNewTaskResults{tp1}
	mmNewTask.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNewTask.mock
}

// Set uses given function f to mock the TaskFactory.NewTask method
func (mmNewTask *mTaskFactoryMockNewTask) Set(f func(device string, language string) (tp1 *Task)) *TaskFactoryMock {
	if mmNewTask.defaultExpectation != nil {
		mmNewTask.mock.t.Fatalf("Default expectation is already set for the TaskFactory.NewTask method")
	}

	if len(mmNewTask.expectations) > 0 {
		mmNewTask.mock.t.Fatalf("Some expectations are already set for the TaskFactory.NewTask method")
	}

	mmNewTask.mock.funcNewTask = f
	mmNewTask.mock.funcNewTaskOrigin = minimock.CallerInfo(1)
	return mmNewTask.mock
}

// When sets expectation for the TaskFactory.NewTask which will trigger the result defined by the following
// Then helper
func (mmNewTask *mTaskFactoryMockNewTask) When(device string, language string) *TaskFactoryMockNewTaskExpectation {
	if mmNewTask.mock.funcNewTask != nil {
		mmNewTask.mock.t.Fatalf("TaskFactoryMock.NewTask mock is already set by Set")
	}

	expectation := &TaskFactoryMockNewTaskExpectation{
		mock:               mmNewTask.mock,
		params:             &TaskFactoryMockNewTaskParams{device, language},
		expectationOrigins: TaskFactoryMockNewTaskExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmNewTask.expectations = append(mmNewTask.expectations, expectation)
	return expectation
}

// Then sets up TaskFactory.NewTask return parameters for the expectation previously defined by the When method
func (e *TaskFactoryMockNewTaskExpectation) Then(tp1 *Task) *TaskFactoryMock {
	e.results = &TaskFactoryMockNewTaskResults{tp1}
	return e.mock
}

// Times sets number of times TaskFactory.NewTask should be invoked
func (mmNewTask *mTaskFactoryMockNewTask) Times(n uint64) *mTaskFactoryMockNewTask {
	if n == 0 {
		mmNewTask.mock.t.Fatalf("Times of TaskFactoryMock.NewTask mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNewTask.expectedInvocations, n)
	mmNewTask.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNewTask
}

func (mmNewTask *mTaskFactoryMockNewTask) invocationsDone() bool {
	if len(mmNewTask.expectations) == 0 && mmNewTask.defaultExpectation == nil && mmNewTask.mock.funcNewTask == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNewTask.mock.afterNewTaskCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNewTask.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// NewTask implements TaskFactory
func (mmNewTask *TaskFactoryMock) NewTask(device string, language string) (tp1 *Task) {
	mm_atomic.AddUint64(&mmNewTask.beforeNewTaskCounter, 1)
	defer mm_atomic.AddUint64(&mmNewTask.afterNewTaskCounter, 1)

	mmNewTask.t.Helper()

	if mmNewTask.inspectFuncNewTask != nil {
		mmNewTask.inspectFuncNewTask(device, language)
	}

	mm_params := TaskFactoryMockNewTaskParams{device, language}

	// Record call args
	mmNewTask.NewTaskMock.mutex.Lock()
	mmNewTask.NewTaskMock.callArgs = append(mmNewTask.NewTaskMock.callArgs, &mm_params)
	mmNewTask.NewTaskMock.mutex.Unlock()

	for _, e := range mmNewTask.NewTaskMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1
		}
	}

	if mmNewTask.NewTaskMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewTask.NewTaskMock.defaultExpectation.Counter, 1)
		mm_want := mmNewTask.NewTaskMock.defaultExpectation.params
		mm_want_ptrs := mmNewTask.NewTaskMock.defaultExpectation.paramPtrs

		mm_got := TaskFactoryMockNewTaskParams{device, language}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.device != nil && !minimock.Equal(*mm_want_ptrs.device, mm_got.device) {
				mmNewTask.t.Errorf("TaskFactoryMock.NewTask got unexpected parameter device, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmNewTask.NewTaskMock.defaultExpectation.expectationOrigins.originDevice, *mm_want_ptrs.device, mm_got.device, minimock.Diff(*mm_want_ptrs.device, mm_got.device))
			}

			if mm_want_ptrs.language != nil && !minimock.Equal(*mm_want_ptrs.language, mm_got.language) {
				mmNewTask.t.Errorf("TaskFactoryMock.NewTask got unexpected parameter language, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmNewTask.NewTaskMock.defaultExpectation.expectationOrigins.originLanguage, *mm_want_ptrs.language, mm_got.language, minimock.Diff(*mm_want_ptrs.language, mm_got.language))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNewTask.t.Errorf("TaskFactoryMock.NewTask got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmNewTask.NewTaskMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNewTask.NewTaskMock.defaultExpectation.results
		if mm_results == nil {
			mmNewTask.t.Fatal("No results are set for the TaskFactoryMock.NewTask")
		}
		return (*mm_results).tp1
	}
	if mmNewTask.funcNewTask != nil {
		return mmNewTask.funcNewTask(device, language)
	}
	mmNewTask.t.Fatalf("Unexpected call to TaskFactoryMock.NewTask. %v %v", device, language)
	return
}

// NewTaskAfterCounter returns a count of finished TaskFactoryMock.NewTask invocations
func (mmNewTask *TaskFactoryMock) NewTaskAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewTask.afterNewTaskCounter)
}

// NewTaskBeforeCounter returns a count of TaskFactoryMock.NewTask invocations
func (mmNewTask *TaskFactoryMock) NewTaskBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewTask.beforeNewTaskCounter)
}

// Calls returns a list of arguments used in each call to TaskFactoryMock.NewTask.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNewTask *mTaskFactoryMockNewTask) Calls() []*TaskFactoryMockNewTaskParams {
	mmNewTask.mutex.RLock()

	argCopy := make([]*TaskFactoryMockNewTaskParams, len(mmNewTask.callArgs))
	copy(argCopy, mmNewTask.callArgs)

	mmNewTask.mutex.RUnlock()

	return argCopy
}

// MinimockNewTaskDone returns true if the count of the NewTask invocations corresponds
// the number of defined expectations
func (m *TaskFactoryMock) MinimockNewTaskDone() bool {
	if m.NewTaskMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewTaskMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewTaskMock.invocationsDone()
}

// MinimockNewTaskInspect logs each unmet expectation
func (m *TaskFactoryMock) MinimockNewTaskInspect() {
	for _, e := range m.NewTaskMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TaskFactoryMock.NewTask at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterNewTaskCounter := mm_atomic.LoadUint64(&m.afterNewTaskCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewTaskMock.defaultExpectation != nil && afterNewTaskCounter < 1 {
		if m.NewTaskMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TaskFactoryMock.NewTask at\n%s", m.NewTaskMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TaskFactoryMock.NewTask at\n%s with params: %#v", m.NewTaskMock.defaultExpectation.expectationOrigins.origin, *m.NewTaskMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewTask != nil && afterNewTaskCounter < 1 {
		m.t.Errorf("Expected call to TaskFactoryMock.NewTask at\n%s", m.funcNewTaskOrigin)
	}

	if !m.NewTaskMock.invocationsDone() && afterNewTaskCounter > 0 {
		m.t.Errorf("Expected %d calls to TaskFactoryMock.NewTask at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewTaskMock.expectedInvocations), m.NewTaskMock.expectedInvocationsOrigin, afterNewTaskCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TaskFactoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNewTaskInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TaskFactoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TaskFactoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewTaskDone()
}
