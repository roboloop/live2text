// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package components

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// BurnerComponentMock implements BurnerComponent
type BurnerComponentMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSaveAudio          func(ctx context.Context, input <-chan []int16, parameters BurnerParameters) (err error)
	funcSaveAudioOrigin    string
	inspectFuncSaveAudio   func(ctx context.Context, input <-chan []int16, parameters BurnerParameters)
	afterSaveAudioCounter  uint64
	beforeSaveAudioCounter uint64
	SaveAudioMock          mBurnerComponentMockSaveAudio
}

// NewBurnerComponentMock returns a mock for BurnerComponent
func NewBurnerComponentMock(t minimock.Tester) *BurnerComponentMock {
	m := &BurnerComponentMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveAudioMock = mBurnerComponentMockSaveAudio{mock: m}
	m.SaveAudioMock.callArgs = []*BurnerComponentMockSaveAudioParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mBurnerComponentMockSaveAudio struct {
	optional           bool
	mock               *BurnerComponentMock
	defaultExpectation *BurnerComponentMockSaveAudioExpectation
	expectations       []*BurnerComponentMockSaveAudioExpectation

	callArgs []*BurnerComponentMockSaveAudioParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// BurnerComponentMockSaveAudioExpectation specifies expectation struct of the BurnerComponent.SaveAudio
type BurnerComponentMockSaveAudioExpectation struct {
	mock               *BurnerComponentMock
	params             *BurnerComponentMockSaveAudioParams
	paramPtrs          *BurnerComponentMockSaveAudioParamPtrs
	expectationOrigins BurnerComponentMockSaveAudioExpectationOrigins
	results            *BurnerComponentMockSaveAudioResults
	returnOrigin       string
	Counter            uint64
}

// BurnerComponentMockSaveAudioParams contains parameters of the BurnerComponent.SaveAudio
type BurnerComponentMockSaveAudioParams struct {
	ctx        context.Context
	input      <-chan []int16
	parameters BurnerParameters
}

// BurnerComponentMockSaveAudioParamPtrs contains pointers to parameters of the BurnerComponent.SaveAudio
type BurnerComponentMockSaveAudioParamPtrs struct {
	ctx        *context.Context
	input      *<-chan []int16
	parameters *BurnerParameters
}

// BurnerComponentMockSaveAudioResults contains results of the BurnerComponent.SaveAudio
type BurnerComponentMockSaveAudioResults struct {
	err error
}

// BurnerComponentMockSaveAudioOrigins contains origins of expectations of the BurnerComponent.SaveAudio
type BurnerComponentMockSaveAudioExpectationOrigins struct {
	origin           string
	originCtx        string
	originInput      string
	originParameters string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveAudio *mBurnerComponentMockSaveAudio) Optional() *mBurnerComponentMockSaveAudio {
	mmSaveAudio.optional = true
	return mmSaveAudio
}

// Expect sets up expected params for BurnerComponent.SaveAudio
func (mmSaveAudio *mBurnerComponentMockSaveAudio) Expect(ctx context.Context, input <-chan []int16, parameters BurnerParameters) *mBurnerComponentMockSaveAudio {
	if mmSaveAudio.mock.funcSaveAudio != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Set")
	}

	if mmSaveAudio.defaultExpectation == nil {
		mmSaveAudio.defaultExpectation = &BurnerComponentMockSaveAudioExpectation{}
	}

	if mmSaveAudio.defaultExpectation.paramPtrs != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by ExpectParams functions")
	}

	mmSaveAudio.defaultExpectation.params = &BurnerComponentMockSaveAudioParams{ctx, input, parameters}
	mmSaveAudio.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveAudio.expectations {
		if minimock.Equal(e.params, mmSaveAudio.defaultExpectation.params) {
			mmSaveAudio.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveAudio.defaultExpectation.params)
		}
	}

	return mmSaveAudio
}

// ExpectCtxParam1 sets up expected param ctx for BurnerComponent.SaveAudio
func (mmSaveAudio *mBurnerComponentMockSaveAudio) ExpectCtxParam1(ctx context.Context) *mBurnerComponentMockSaveAudio {
	if mmSaveAudio.mock.funcSaveAudio != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Set")
	}

	if mmSaveAudio.defaultExpectation == nil {
		mmSaveAudio.defaultExpectation = &BurnerComponentMockSaveAudioExpectation{}
	}

	if mmSaveAudio.defaultExpectation.params != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Expect")
	}

	if mmSaveAudio.defaultExpectation.paramPtrs == nil {
		mmSaveAudio.defaultExpectation.paramPtrs = &BurnerComponentMockSaveAudioParamPtrs{}
	}
	mmSaveAudio.defaultExpectation.paramPtrs.ctx = &ctx
	mmSaveAudio.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSaveAudio
}

// ExpectInputParam2 sets up expected param input for BurnerComponent.SaveAudio
func (mmSaveAudio *mBurnerComponentMockSaveAudio) ExpectInputParam2(input <-chan []int16) *mBurnerComponentMockSaveAudio {
	if mmSaveAudio.mock.funcSaveAudio != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Set")
	}

	if mmSaveAudio.defaultExpectation == nil {
		mmSaveAudio.defaultExpectation = &BurnerComponentMockSaveAudioExpectation{}
	}

	if mmSaveAudio.defaultExpectation.params != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Expect")
	}

	if mmSaveAudio.defaultExpectation.paramPtrs == nil {
		mmSaveAudio.defaultExpectation.paramPtrs = &BurnerComponentMockSaveAudioParamPtrs{}
	}
	mmSaveAudio.defaultExpectation.paramPtrs.input = &input
	mmSaveAudio.defaultExpectation.expectationOrigins.originInput = minimock.CallerInfo(1)

	return mmSaveAudio
}

// ExpectParametersParam3 sets up expected param parameters for BurnerComponent.SaveAudio
func (mmSaveAudio *mBurnerComponentMockSaveAudio) ExpectParametersParam3(parameters BurnerParameters) *mBurnerComponentMockSaveAudio {
	if mmSaveAudio.mock.funcSaveAudio != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Set")
	}

	if mmSaveAudio.defaultExpectation == nil {
		mmSaveAudio.defaultExpectation = &BurnerComponentMockSaveAudioExpectation{}
	}

	if mmSaveAudio.defaultExpectation.params != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Expect")
	}

	if mmSaveAudio.defaultExpectation.paramPtrs == nil {
		mmSaveAudio.defaultExpectation.paramPtrs = &BurnerComponentMockSaveAudioParamPtrs{}
	}
	mmSaveAudio.defaultExpectation.paramPtrs.parameters = &parameters
	mmSaveAudio.defaultExpectation.expectationOrigins.originParameters = minimock.CallerInfo(1)

	return mmSaveAudio
}

// Inspect accepts an inspector function that has same arguments as the BurnerComponent.SaveAudio
func (mmSaveAudio *mBurnerComponentMockSaveAudio) Inspect(f func(ctx context.Context, input <-chan []int16, parameters BurnerParameters)) *mBurnerComponentMockSaveAudio {
	if mmSaveAudio.mock.inspectFuncSaveAudio != nil {
		mmSaveAudio.mock.t.Fatalf("Inspect function is already set for BurnerComponentMock.SaveAudio")
	}

	mmSaveAudio.mock.inspectFuncSaveAudio = f

	return mmSaveAudio
}

// Return sets up results that will be returned by BurnerComponent.SaveAudio
func (mmSaveAudio *mBurnerComponentMockSaveAudio) Return(err error) *BurnerComponentMock {
	if mmSaveAudio.mock.funcSaveAudio != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Set")
	}

	if mmSaveAudio.defaultExpectation == nil {
		mmSaveAudio.defaultExpectation = &BurnerComponentMockSaveAudioExpectation{mock: mmSaveAudio.mock}
	}
	mmSaveAudio.defaultExpectation.results = &BurnerComponentMockSaveAudioResults{err}
	mmSaveAudio.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveAudio.mock
}

// Set uses given function f to mock the BurnerComponent.SaveAudio method
func (mmSaveAudio *mBurnerComponentMockSaveAudio) Set(f func(ctx context.Context, input <-chan []int16, parameters BurnerParameters) (err error)) *BurnerComponentMock {
	if mmSaveAudio.defaultExpectation != nil {
		mmSaveAudio.mock.t.Fatalf("Default expectation is already set for the BurnerComponent.SaveAudio method")
	}

	if len(mmSaveAudio.expectations) > 0 {
		mmSaveAudio.mock.t.Fatalf("Some expectations are already set for the BurnerComponent.SaveAudio method")
	}

	mmSaveAudio.mock.funcSaveAudio = f
	mmSaveAudio.mock.funcSaveAudioOrigin = minimock.CallerInfo(1)
	return mmSaveAudio.mock
}

// When sets expectation for the BurnerComponent.SaveAudio which will trigger the result defined by the following
// Then helper
func (mmSaveAudio *mBurnerComponentMockSaveAudio) When(ctx context.Context, input <-chan []int16, parameters BurnerParameters) *BurnerComponentMockSaveAudioExpectation {
	if mmSaveAudio.mock.funcSaveAudio != nil {
		mmSaveAudio.mock.t.Fatalf("BurnerComponentMock.SaveAudio mock is already set by Set")
	}

	expectation := &BurnerComponentMockSaveAudioExpectation{
		mock:               mmSaveAudio.mock,
		params:             &BurnerComponentMockSaveAudioParams{ctx, input, parameters},
		expectationOrigins: BurnerComponentMockSaveAudioExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveAudio.expectations = append(mmSaveAudio.expectations, expectation)
	return expectation
}

// Then sets up BurnerComponent.SaveAudio return parameters for the expectation previously defined by the When method
func (e *BurnerComponentMockSaveAudioExpectation) Then(err error) *BurnerComponentMock {
	e.results = &BurnerComponentMockSaveAudioResults{err}
	return e.mock
}

// Times sets number of times BurnerComponent.SaveAudio should be invoked
func (mmSaveAudio *mBurnerComponentMockSaveAudio) Times(n uint64) *mBurnerComponentMockSaveAudio {
	if n == 0 {
		mmSaveAudio.mock.t.Fatalf("Times of BurnerComponentMock.SaveAudio mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveAudio.expectedInvocations, n)
	mmSaveAudio.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveAudio
}

func (mmSaveAudio *mBurnerComponentMockSaveAudio) invocationsDone() bool {
	if len(mmSaveAudio.expectations) == 0 && mmSaveAudio.defaultExpectation == nil && mmSaveAudio.mock.funcSaveAudio == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveAudio.mock.afterSaveAudioCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveAudio.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveAudio implements BurnerComponent
func (mmSaveAudio *BurnerComponentMock) SaveAudio(ctx context.Context, input <-chan []int16, parameters BurnerParameters) (err error) {
	mm_atomic.AddUint64(&mmSaveAudio.beforeSaveAudioCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveAudio.afterSaveAudioCounter, 1)

	mmSaveAudio.t.Helper()

	if mmSaveAudio.inspectFuncSaveAudio != nil {
		mmSaveAudio.inspectFuncSaveAudio(ctx, input, parameters)
	}

	mm_params := BurnerComponentMockSaveAudioParams{ctx, input, parameters}

	// Record call args
	mmSaveAudio.SaveAudioMock.mutex.Lock()
	mmSaveAudio.SaveAudioMock.callArgs = append(mmSaveAudio.SaveAudioMock.callArgs, &mm_params)
	mmSaveAudio.SaveAudioMock.mutex.Unlock()

	for _, e := range mmSaveAudio.SaveAudioMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveAudio.SaveAudioMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveAudio.SaveAudioMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveAudio.SaveAudioMock.defaultExpectation.params
		mm_want_ptrs := mmSaveAudio.SaveAudioMock.defaultExpectation.paramPtrs

		mm_got := BurnerComponentMockSaveAudioParams{ctx, input, parameters}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSaveAudio.t.Errorf("BurnerComponentMock.SaveAudio got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveAudio.SaveAudioMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.input != nil && !minimock.Equal(*mm_want_ptrs.input, mm_got.input) {
				mmSaveAudio.t.Errorf("BurnerComponentMock.SaveAudio got unexpected parameter input, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveAudio.SaveAudioMock.defaultExpectation.expectationOrigins.originInput, *mm_want_ptrs.input, mm_got.input, minimock.Diff(*mm_want_ptrs.input, mm_got.input))
			}

			if mm_want_ptrs.parameters != nil && !minimock.Equal(*mm_want_ptrs.parameters, mm_got.parameters) {
				mmSaveAudio.t.Errorf("BurnerComponentMock.SaveAudio got unexpected parameter parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveAudio.SaveAudioMock.defaultExpectation.expectationOrigins.originParameters, *mm_want_ptrs.parameters, mm_got.parameters, minimock.Diff(*mm_want_ptrs.parameters, mm_got.parameters))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveAudio.t.Errorf("BurnerComponentMock.SaveAudio got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveAudio.SaveAudioMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveAudio.SaveAudioMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveAudio.t.Fatal("No results are set for the BurnerComponentMock.SaveAudio")
		}
		return (*mm_results).err
	}
	if mmSaveAudio.funcSaveAudio != nil {
		return mmSaveAudio.funcSaveAudio(ctx, input, parameters)
	}
	mmSaveAudio.t.Fatalf("Unexpected call to BurnerComponentMock.SaveAudio. %v %v %v", ctx, input, parameters)
	return
}

// SaveAudioAfterCounter returns a count of finished BurnerComponentMock.SaveAudio invocations
func (mmSaveAudio *BurnerComponentMock) SaveAudioAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveAudio.afterSaveAudioCounter)
}

// SaveAudioBeforeCounter returns a count of BurnerComponentMock.SaveAudio invocations
func (mmSaveAudio *BurnerComponentMock) SaveAudioBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveAudio.beforeSaveAudioCounter)
}

// Calls returns a list of arguments used in each call to BurnerComponentMock.SaveAudio.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveAudio *mBurnerComponentMockSaveAudio) Calls() []*BurnerComponentMockSaveAudioParams {
	mmSaveAudio.mutex.RLock()

	argCopy := make([]*BurnerComponentMockSaveAudioParams, len(mmSaveAudio.callArgs))
	copy(argCopy, mmSaveAudio.callArgs)

	mmSaveAudio.mutex.RUnlock()

	return argCopy
}

// MinimockSaveAudioDone returns true if the count of the SaveAudio invocations corresponds
// the number of defined expectations
func (m *BurnerComponentMock) MinimockSaveAudioDone() bool {
	if m.SaveAudioMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveAudioMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveAudioMock.invocationsDone()
}

// MinimockSaveAudioInspect logs each unmet expectation
func (m *BurnerComponentMock) MinimockSaveAudioInspect() {
	for _, e := range m.SaveAudioMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to BurnerComponentMock.SaveAudio at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveAudioCounter := mm_atomic.LoadUint64(&m.afterSaveAudioCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveAudioMock.defaultExpectation != nil && afterSaveAudioCounter < 1 {
		if m.SaveAudioMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to BurnerComponentMock.SaveAudio at\n%s", m.SaveAudioMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to BurnerComponentMock.SaveAudio at\n%s with params: %#v", m.SaveAudioMock.defaultExpectation.expectationOrigins.origin, *m.SaveAudioMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveAudio != nil && afterSaveAudioCounter < 1 {
		m.t.Errorf("Expected call to BurnerComponentMock.SaveAudio at\n%s", m.funcSaveAudioOrigin)
	}

	if !m.SaveAudioMock.invocationsDone() && afterSaveAudioCounter > 0 {
		m.t.Errorf("Expected %d calls to BurnerComponentMock.SaveAudio at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveAudioMock.expectedInvocations), m.SaveAudioMock.expectedInvocationsOrigin, afterSaveAudioCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *BurnerComponentMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveAudioInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *BurnerComponentMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *BurnerComponentMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveAudioDone()
}
