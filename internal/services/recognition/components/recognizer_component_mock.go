// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package components

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RecognizerComponentMock implements RecognizerComponent
type RecognizerComponentMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcRecognize          func(ctx context.Context, parameters RecognizeParameters, input <-chan []int16, output chan<- Recognized) (err error)
	funcRecognizeOrigin    string
	inspectFuncRecognize   func(ctx context.Context, parameters RecognizeParameters, input <-chan []int16, output chan<- Recognized)
	afterRecognizeCounter  uint64
	beforeRecognizeCounter uint64
	RecognizeMock          mRecognizerComponentMockRecognize
}

// NewRecognizerComponentMock returns a mock for RecognizerComponent
func NewRecognizerComponentMock(t minimock.Tester) *RecognizerComponentMock {
	m := &RecognizerComponentMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RecognizeMock = mRecognizerComponentMockRecognize{mock: m}
	m.RecognizeMock.callArgs = []*RecognizerComponentMockRecognizeParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRecognizerComponentMockRecognize struct {
	optional           bool
	mock               *RecognizerComponentMock
	defaultExpectation *RecognizerComponentMockRecognizeExpectation
	expectations       []*RecognizerComponentMockRecognizeExpectation

	callArgs []*RecognizerComponentMockRecognizeParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RecognizerComponentMockRecognizeExpectation specifies expectation struct of the RecognizerComponent.Recognize
type RecognizerComponentMockRecognizeExpectation struct {
	mock               *RecognizerComponentMock
	params             *RecognizerComponentMockRecognizeParams
	paramPtrs          *RecognizerComponentMockRecognizeParamPtrs
	expectationOrigins RecognizerComponentMockRecognizeExpectationOrigins
	results            *RecognizerComponentMockRecognizeResults
	returnOrigin       string
	Counter            uint64
}

// RecognizerComponentMockRecognizeParams contains parameters of the RecognizerComponent.Recognize
type RecognizerComponentMockRecognizeParams struct {
	ctx        context.Context
	parameters RecognizeParameters
	input      <-chan []int16
	output     chan<- Recognized
}

// RecognizerComponentMockRecognizeParamPtrs contains pointers to parameters of the RecognizerComponent.Recognize
type RecognizerComponentMockRecognizeParamPtrs struct {
	ctx        *context.Context
	parameters *RecognizeParameters
	input      *<-chan []int16
	output     *chan<- Recognized
}

// RecognizerComponentMockRecognizeResults contains results of the RecognizerComponent.Recognize
type RecognizerComponentMockRecognizeResults struct {
	err error
}

// RecognizerComponentMockRecognizeOrigins contains origins of expectations of the RecognizerComponent.Recognize
type RecognizerComponentMockRecognizeExpectationOrigins struct {
	origin           string
	originCtx        string
	originParameters string
	originInput      string
	originOutput     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRecognize *mRecognizerComponentMockRecognize) Optional() *mRecognizerComponentMockRecognize {
	mmRecognize.optional = true
	return mmRecognize
}

// Expect sets up expected params for RecognizerComponent.Recognize
func (mmRecognize *mRecognizerComponentMockRecognize) Expect(ctx context.Context, parameters RecognizeParameters, input <-chan []int16, output chan<- Recognized) *mRecognizerComponentMockRecognize {
	if mmRecognize.mock.funcRecognize != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Set")
	}

	if mmRecognize.defaultExpectation == nil {
		mmRecognize.defaultExpectation = &RecognizerComponentMockRecognizeExpectation{}
	}

	if mmRecognize.defaultExpectation.paramPtrs != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by ExpectParams functions")
	}

	mmRecognize.defaultExpectation.params = &RecognizerComponentMockRecognizeParams{ctx, parameters, input, output}
	mmRecognize.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRecognize.expectations {
		if minimock.Equal(e.params, mmRecognize.defaultExpectation.params) {
			mmRecognize.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRecognize.defaultExpectation.params)
		}
	}

	return mmRecognize
}

// ExpectCtxParam1 sets up expected param ctx for RecognizerComponent.Recognize
func (mmRecognize *mRecognizerComponentMockRecognize) ExpectCtxParam1(ctx context.Context) *mRecognizerComponentMockRecognize {
	if mmRecognize.mock.funcRecognize != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Set")
	}

	if mmRecognize.defaultExpectation == nil {
		mmRecognize.defaultExpectation = &RecognizerComponentMockRecognizeExpectation{}
	}

	if mmRecognize.defaultExpectation.params != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Expect")
	}

	if mmRecognize.defaultExpectation.paramPtrs == nil {
		mmRecognize.defaultExpectation.paramPtrs = &RecognizerComponentMockRecognizeParamPtrs{}
	}
	mmRecognize.defaultExpectation.paramPtrs.ctx = &ctx
	mmRecognize.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRecognize
}

// ExpectParametersParam2 sets up expected param parameters for RecognizerComponent.Recognize
func (mmRecognize *mRecognizerComponentMockRecognize) ExpectParametersParam2(parameters RecognizeParameters) *mRecognizerComponentMockRecognize {
	if mmRecognize.mock.funcRecognize != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Set")
	}

	if mmRecognize.defaultExpectation == nil {
		mmRecognize.defaultExpectation = &RecognizerComponentMockRecognizeExpectation{}
	}

	if mmRecognize.defaultExpectation.params != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Expect")
	}

	if mmRecognize.defaultExpectation.paramPtrs == nil {
		mmRecognize.defaultExpectation.paramPtrs = &RecognizerComponentMockRecognizeParamPtrs{}
	}
	mmRecognize.defaultExpectation.paramPtrs.parameters = &parameters
	mmRecognize.defaultExpectation.expectationOrigins.originParameters = minimock.CallerInfo(1)

	return mmRecognize
}

// ExpectInputParam3 sets up expected param input for RecognizerComponent.Recognize
func (mmRecognize *mRecognizerComponentMockRecognize) ExpectInputParam3(input <-chan []int16) *mRecognizerComponentMockRecognize {
	if mmRecognize.mock.funcRecognize != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Set")
	}

	if mmRecognize.defaultExpectation == nil {
		mmRecognize.defaultExpectation = &RecognizerComponentMockRecognizeExpectation{}
	}

	if mmRecognize.defaultExpectation.params != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Expect")
	}

	if mmRecognize.defaultExpectation.paramPtrs == nil {
		mmRecognize.defaultExpectation.paramPtrs = &RecognizerComponentMockRecognizeParamPtrs{}
	}
	mmRecognize.defaultExpectation.paramPtrs.input = &input
	mmRecognize.defaultExpectation.expectationOrigins.originInput = minimock.CallerInfo(1)

	return mmRecognize
}

// ExpectOutputParam4 sets up expected param output for RecognizerComponent.Recognize
func (mmRecognize *mRecognizerComponentMockRecognize) ExpectOutputParam4(output chan<- Recognized) *mRecognizerComponentMockRecognize {
	if mmRecognize.mock.funcRecognize != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Set")
	}

	if mmRecognize.defaultExpectation == nil {
		mmRecognize.defaultExpectation = &RecognizerComponentMockRecognizeExpectation{}
	}

	if mmRecognize.defaultExpectation.params != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Expect")
	}

	if mmRecognize.defaultExpectation.paramPtrs == nil {
		mmRecognize.defaultExpectation.paramPtrs = &RecognizerComponentMockRecognizeParamPtrs{}
	}
	mmRecognize.defaultExpectation.paramPtrs.output = &output
	mmRecognize.defaultExpectation.expectationOrigins.originOutput = minimock.CallerInfo(1)

	return mmRecognize
}

// Inspect accepts an inspector function that has same arguments as the RecognizerComponent.Recognize
func (mmRecognize *mRecognizerComponentMockRecognize) Inspect(f func(ctx context.Context, parameters RecognizeParameters, input <-chan []int16, output chan<- Recognized)) *mRecognizerComponentMockRecognize {
	if mmRecognize.mock.inspectFuncRecognize != nil {
		mmRecognize.mock.t.Fatalf("Inspect function is already set for RecognizerComponentMock.Recognize")
	}

	mmRecognize.mock.inspectFuncRecognize = f

	return mmRecognize
}

// Return sets up results that will be returned by RecognizerComponent.Recognize
func (mmRecognize *mRecognizerComponentMockRecognize) Return(err error) *RecognizerComponentMock {
	if mmRecognize.mock.funcRecognize != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Set")
	}

	if mmRecognize.defaultExpectation == nil {
		mmRecognize.defaultExpectation = &RecognizerComponentMockRecognizeExpectation{mock: mmRecognize.mock}
	}
	mmRecognize.defaultExpectation.results = &RecognizerComponentMockRecognizeResults{err}
	mmRecognize.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRecognize.mock
}

// Set uses given function f to mock the RecognizerComponent.Recognize method
func (mmRecognize *mRecognizerComponentMockRecognize) Set(f func(ctx context.Context, parameters RecognizeParameters, input <-chan []int16, output chan<- Recognized) (err error)) *RecognizerComponentMock {
	if mmRecognize.defaultExpectation != nil {
		mmRecognize.mock.t.Fatalf("Default expectation is already set for the RecognizerComponent.Recognize method")
	}

	if len(mmRecognize.expectations) > 0 {
		mmRecognize.mock.t.Fatalf("Some expectations are already set for the RecognizerComponent.Recognize method")
	}

	mmRecognize.mock.funcRecognize = f
	mmRecognize.mock.funcRecognizeOrigin = minimock.CallerInfo(1)
	return mmRecognize.mock
}

// When sets expectation for the RecognizerComponent.Recognize which will trigger the result defined by the following
// Then helper
func (mmRecognize *mRecognizerComponentMockRecognize) When(ctx context.Context, parameters RecognizeParameters, input <-chan []int16, output chan<- Recognized) *RecognizerComponentMockRecognizeExpectation {
	if mmRecognize.mock.funcRecognize != nil {
		mmRecognize.mock.t.Fatalf("RecognizerComponentMock.Recognize mock is already set by Set")
	}

	expectation := &RecognizerComponentMockRecognizeExpectation{
		mock:               mmRecognize.mock,
		params:             &RecognizerComponentMockRecognizeParams{ctx, parameters, input, output},
		expectationOrigins: RecognizerComponentMockRecognizeExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRecognize.expectations = append(mmRecognize.expectations, expectation)
	return expectation
}

// Then sets up RecognizerComponent.Recognize return parameters for the expectation previously defined by the When method
func (e *RecognizerComponentMockRecognizeExpectation) Then(err error) *RecognizerComponentMock {
	e.results = &RecognizerComponentMockRecognizeResults{err}
	return e.mock
}

// Times sets number of times RecognizerComponent.Recognize should be invoked
func (mmRecognize *mRecognizerComponentMockRecognize) Times(n uint64) *mRecognizerComponentMockRecognize {
	if n == 0 {
		mmRecognize.mock.t.Fatalf("Times of RecognizerComponentMock.Recognize mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRecognize.expectedInvocations, n)
	mmRecognize.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRecognize
}

func (mmRecognize *mRecognizerComponentMockRecognize) invocationsDone() bool {
	if len(mmRecognize.expectations) == 0 && mmRecognize.defaultExpectation == nil && mmRecognize.mock.funcRecognize == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRecognize.mock.afterRecognizeCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRecognize.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Recognize implements RecognizerComponent
func (mmRecognize *RecognizerComponentMock) Recognize(ctx context.Context, parameters RecognizeParameters, input <-chan []int16, output chan<- Recognized) (err error) {
	mm_atomic.AddUint64(&mmRecognize.beforeRecognizeCounter, 1)
	defer mm_atomic.AddUint64(&mmRecognize.afterRecognizeCounter, 1)

	mmRecognize.t.Helper()

	if mmRecognize.inspectFuncRecognize != nil {
		mmRecognize.inspectFuncRecognize(ctx, parameters, input, output)
	}

	mm_params := RecognizerComponentMockRecognizeParams{ctx, parameters, input, output}

	// Record call args
	mmRecognize.RecognizeMock.mutex.Lock()
	mmRecognize.RecognizeMock.callArgs = append(mmRecognize.RecognizeMock.callArgs, &mm_params)
	mmRecognize.RecognizeMock.mutex.Unlock()

	for _, e := range mmRecognize.RecognizeMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRecognize.RecognizeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRecognize.RecognizeMock.defaultExpectation.Counter, 1)
		mm_want := mmRecognize.RecognizeMock.defaultExpectation.params
		mm_want_ptrs := mmRecognize.RecognizeMock.defaultExpectation.paramPtrs

		mm_got := RecognizerComponentMockRecognizeParams{ctx, parameters, input, output}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRecognize.t.Errorf("RecognizerComponentMock.Recognize got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRecognize.RecognizeMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.parameters != nil && !minimock.Equal(*mm_want_ptrs.parameters, mm_got.parameters) {
				mmRecognize.t.Errorf("RecognizerComponentMock.Recognize got unexpected parameter parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRecognize.RecognizeMock.defaultExpectation.expectationOrigins.originParameters, *mm_want_ptrs.parameters, mm_got.parameters, minimock.Diff(*mm_want_ptrs.parameters, mm_got.parameters))
			}

			if mm_want_ptrs.input != nil && !minimock.Equal(*mm_want_ptrs.input, mm_got.input) {
				mmRecognize.t.Errorf("RecognizerComponentMock.Recognize got unexpected parameter input, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRecognize.RecognizeMock.defaultExpectation.expectationOrigins.originInput, *mm_want_ptrs.input, mm_got.input, minimock.Diff(*mm_want_ptrs.input, mm_got.input))
			}

			if mm_want_ptrs.output != nil && !minimock.Equal(*mm_want_ptrs.output, mm_got.output) {
				mmRecognize.t.Errorf("RecognizerComponentMock.Recognize got unexpected parameter output, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRecognize.RecognizeMock.defaultExpectation.expectationOrigins.originOutput, *mm_want_ptrs.output, mm_got.output, minimock.Diff(*mm_want_ptrs.output, mm_got.output))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRecognize.t.Errorf("RecognizerComponentMock.Recognize got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRecognize.RecognizeMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRecognize.RecognizeMock.defaultExpectation.results
		if mm_results == nil {
			mmRecognize.t.Fatal("No results are set for the RecognizerComponentMock.Recognize")
		}
		return (*mm_results).err
	}
	if mmRecognize.funcRecognize != nil {
		return mmRecognize.funcRecognize(ctx, parameters, input, output)
	}
	mmRecognize.t.Fatalf("Unexpected call to RecognizerComponentMock.Recognize. %v %v %v %v", ctx, parameters, input, output)
	return
}

// RecognizeAfterCounter returns a count of finished RecognizerComponentMock.Recognize invocations
func (mmRecognize *RecognizerComponentMock) RecognizeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRecognize.afterRecognizeCounter)
}

// RecognizeBeforeCounter returns a count of RecognizerComponentMock.Recognize invocations
func (mmRecognize *RecognizerComponentMock) RecognizeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRecognize.beforeRecognizeCounter)
}

// Calls returns a list of arguments used in each call to RecognizerComponentMock.Recognize.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRecognize *mRecognizerComponentMockRecognize) Calls() []*RecognizerComponentMockRecognizeParams {
	mmRecognize.mutex.RLock()

	argCopy := make([]*RecognizerComponentMockRecognizeParams, len(mmRecognize.callArgs))
	copy(argCopy, mmRecognize.callArgs)

	mmRecognize.mutex.RUnlock()

	return argCopy
}

// MinimockRecognizeDone returns true if the count of the Recognize invocations corresponds
// the number of defined expectations
func (m *RecognizerComponentMock) MinimockRecognizeDone() bool {
	if m.RecognizeMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RecognizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RecognizeMock.invocationsDone()
}

// MinimockRecognizeInspect logs each unmet expectation
func (m *RecognizerComponentMock) MinimockRecognizeInspect() {
	for _, e := range m.RecognizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecognizerComponentMock.Recognize at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRecognizeCounter := mm_atomic.LoadUint64(&m.afterRecognizeCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RecognizeMock.defaultExpectation != nil && afterRecognizeCounter < 1 {
		if m.RecognizeMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RecognizerComponentMock.Recognize at\n%s", m.RecognizeMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RecognizerComponentMock.Recognize at\n%s with params: %#v", m.RecognizeMock.defaultExpectation.expectationOrigins.origin, *m.RecognizeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRecognize != nil && afterRecognizeCounter < 1 {
		m.t.Errorf("Expected call to RecognizerComponentMock.Recognize at\n%s", m.funcRecognizeOrigin)
	}

	if !m.RecognizeMock.invocationsDone() && afterRecognizeCounter > 0 {
		m.t.Errorf("Expected %d calls to RecognizerComponentMock.Recognize at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RecognizeMock.expectedInvocations), m.RecognizeMock.expectedInvocationsOrigin, afterRecognizeCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RecognizerComponentMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockRecognizeInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RecognizerComponentMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RecognizerComponentMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRecognizeDone()
}
