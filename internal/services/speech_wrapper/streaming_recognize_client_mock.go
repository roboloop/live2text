// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package speechwrapper

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"cloud.google.com/go/speech/apiv1/speechpb"
	"github.com/gojuno/minimock/v3"
)

// StreamingRecognizeClientMock implements StreamingRecognizeClient
type StreamingRecognizeClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCloseSend          func() (err error)
	funcCloseSendOrigin    string
	inspectFuncCloseSend   func()
	afterCloseSendCounter  uint64
	beforeCloseSendCounter uint64
	CloseSendMock          mStreamingRecognizeClientMockCloseSend

	funcRecv          func() (sp1 *speechpb.StreamingRecognizeResponse, err error)
	funcRecvOrigin    string
	inspectFuncRecv   func()
	afterRecvCounter  uint64
	beforeRecvCounter uint64
	RecvMock          mStreamingRecognizeClientMockRecv

	funcSend          func(sp1 *speechpb.StreamingRecognizeRequest) (err error)
	funcSendOrigin    string
	inspectFuncSend   func(sp1 *speechpb.StreamingRecognizeRequest)
	afterSendCounter  uint64
	beforeSendCounter uint64
	SendMock          mStreamingRecognizeClientMockSend
}

// NewStreamingRecognizeClientMock returns a mock for StreamingRecognizeClient
func NewStreamingRecognizeClientMock(t minimock.Tester) *StreamingRecognizeClientMock {
	m := &StreamingRecognizeClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseSendMock = mStreamingRecognizeClientMockCloseSend{mock: m}

	m.RecvMock = mStreamingRecognizeClientMockRecv{mock: m}

	m.SendMock = mStreamingRecognizeClientMockSend{mock: m}
	m.SendMock.callArgs = []*StreamingRecognizeClientMockSendParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStreamingRecognizeClientMockCloseSend struct {
	optional           bool
	mock               *StreamingRecognizeClientMock
	defaultExpectation *StreamingRecognizeClientMockCloseSendExpectation
	expectations       []*StreamingRecognizeClientMockCloseSendExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StreamingRecognizeClientMockCloseSendExpectation specifies expectation struct of the StreamingRecognizeClient.CloseSend
type StreamingRecognizeClientMockCloseSendExpectation struct {
	mock *StreamingRecognizeClientMock

	results      *StreamingRecognizeClientMockCloseSendResults
	returnOrigin string
	Counter      uint64
}

// StreamingRecognizeClientMockCloseSendResults contains results of the StreamingRecognizeClient.CloseSend
type StreamingRecognizeClientMockCloseSendResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCloseSend *mStreamingRecognizeClientMockCloseSend) Optional() *mStreamingRecognizeClientMockCloseSend {
	mmCloseSend.optional = true
	return mmCloseSend
}

// Expect sets up expected params for StreamingRecognizeClient.CloseSend
func (mmCloseSend *mStreamingRecognizeClientMockCloseSend) Expect() *mStreamingRecognizeClientMockCloseSend {
	if mmCloseSend.mock.funcCloseSend != nil {
		mmCloseSend.mock.t.Fatalf("StreamingRecognizeClientMock.CloseSend mock is already set by Set")
	}

	if mmCloseSend.defaultExpectation == nil {
		mmCloseSend.defaultExpectation = &StreamingRecognizeClientMockCloseSendExpectation{}
	}

	return mmCloseSend
}

// Inspect accepts an inspector function that has same arguments as the StreamingRecognizeClient.CloseSend
func (mmCloseSend *mStreamingRecognizeClientMockCloseSend) Inspect(f func()) *mStreamingRecognizeClientMockCloseSend {
	if mmCloseSend.mock.inspectFuncCloseSend != nil {
		mmCloseSend.mock.t.Fatalf("Inspect function is already set for StreamingRecognizeClientMock.CloseSend")
	}

	mmCloseSend.mock.inspectFuncCloseSend = f

	return mmCloseSend
}

// Return sets up results that will be returned by StreamingRecognizeClient.CloseSend
func (mmCloseSend *mStreamingRecognizeClientMockCloseSend) Return(err error) *StreamingRecognizeClientMock {
	if mmCloseSend.mock.funcCloseSend != nil {
		mmCloseSend.mock.t.Fatalf("StreamingRecognizeClientMock.CloseSend mock is already set by Set")
	}

	if mmCloseSend.defaultExpectation == nil {
		mmCloseSend.defaultExpectation = &StreamingRecognizeClientMockCloseSendExpectation{mock: mmCloseSend.mock}
	}
	mmCloseSend.defaultExpectation.results = &StreamingRecognizeClientMockCloseSendResults{err}
	mmCloseSend.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCloseSend.mock
}

// Set uses given function f to mock the StreamingRecognizeClient.CloseSend method
func (mmCloseSend *mStreamingRecognizeClientMockCloseSend) Set(f func() (err error)) *StreamingRecognizeClientMock {
	if mmCloseSend.defaultExpectation != nil {
		mmCloseSend.mock.t.Fatalf("Default expectation is already set for the StreamingRecognizeClient.CloseSend method")
	}

	if len(mmCloseSend.expectations) > 0 {
		mmCloseSend.mock.t.Fatalf("Some expectations are already set for the StreamingRecognizeClient.CloseSend method")
	}

	mmCloseSend.mock.funcCloseSend = f
	mmCloseSend.mock.funcCloseSendOrigin = minimock.CallerInfo(1)
	return mmCloseSend.mock
}

// Times sets number of times StreamingRecognizeClient.CloseSend should be invoked
func (mmCloseSend *mStreamingRecognizeClientMockCloseSend) Times(n uint64) *mStreamingRecognizeClientMockCloseSend {
	if n == 0 {
		mmCloseSend.mock.t.Fatalf("Times of StreamingRecognizeClientMock.CloseSend mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCloseSend.expectedInvocations, n)
	mmCloseSend.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCloseSend
}

func (mmCloseSend *mStreamingRecognizeClientMockCloseSend) invocationsDone() bool {
	if len(mmCloseSend.expectations) == 0 && mmCloseSend.defaultExpectation == nil && mmCloseSend.mock.funcCloseSend == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCloseSend.mock.afterCloseSendCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCloseSend.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CloseSend implements StreamingRecognizeClient
func (mmCloseSend *StreamingRecognizeClientMock) CloseSend() (err error) {
	mm_atomic.AddUint64(&mmCloseSend.beforeCloseSendCounter, 1)
	defer mm_atomic.AddUint64(&mmCloseSend.afterCloseSendCounter, 1)

	mmCloseSend.t.Helper()

	if mmCloseSend.inspectFuncCloseSend != nil {
		mmCloseSend.inspectFuncCloseSend()
	}

	if mmCloseSend.CloseSendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCloseSend.CloseSendMock.defaultExpectation.Counter, 1)

		mm_results := mmCloseSend.CloseSendMock.defaultExpectation.results
		if mm_results == nil {
			mmCloseSend.t.Fatal("No results are set for the StreamingRecognizeClientMock.CloseSend")
		}
		return (*mm_results).err
	}
	if mmCloseSend.funcCloseSend != nil {
		return mmCloseSend.funcCloseSend()
	}
	mmCloseSend.t.Fatalf("Unexpected call to StreamingRecognizeClientMock.CloseSend.")
	return
}

// CloseSendAfterCounter returns a count of finished StreamingRecognizeClientMock.CloseSend invocations
func (mmCloseSend *StreamingRecognizeClientMock) CloseSendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCloseSend.afterCloseSendCounter)
}

// CloseSendBeforeCounter returns a count of StreamingRecognizeClientMock.CloseSend invocations
func (mmCloseSend *StreamingRecognizeClientMock) CloseSendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCloseSend.beforeCloseSendCounter)
}

// MinimockCloseSendDone returns true if the count of the CloseSend invocations corresponds
// the number of defined expectations
func (m *StreamingRecognizeClientMock) MinimockCloseSendDone() bool {
	if m.CloseSendMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseSendMock.invocationsDone()
}

// MinimockCloseSendInspect logs each unmet expectation
func (m *StreamingRecognizeClientMock) MinimockCloseSendInspect() {
	for _, e := range m.CloseSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StreamingRecognizeClientMock.CloseSend")
		}
	}

	afterCloseSendCounter := mm_atomic.LoadUint64(&m.afterCloseSendCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseSendMock.defaultExpectation != nil && afterCloseSendCounter < 1 {
		m.t.Errorf("Expected call to StreamingRecognizeClientMock.CloseSend at\n%s", m.CloseSendMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCloseSend != nil && afterCloseSendCounter < 1 {
		m.t.Errorf("Expected call to StreamingRecognizeClientMock.CloseSend at\n%s", m.funcCloseSendOrigin)
	}

	if !m.CloseSendMock.invocationsDone() && afterCloseSendCounter > 0 {
		m.t.Errorf("Expected %d calls to StreamingRecognizeClientMock.CloseSend at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CloseSendMock.expectedInvocations), m.CloseSendMock.expectedInvocationsOrigin, afterCloseSendCounter)
	}
}

type mStreamingRecognizeClientMockRecv struct {
	optional           bool
	mock               *StreamingRecognizeClientMock
	defaultExpectation *StreamingRecognizeClientMockRecvExpectation
	expectations       []*StreamingRecognizeClientMockRecvExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StreamingRecognizeClientMockRecvExpectation specifies expectation struct of the StreamingRecognizeClient.Recv
type StreamingRecognizeClientMockRecvExpectation struct {
	mock *StreamingRecognizeClientMock

	results      *StreamingRecognizeClientMockRecvResults
	returnOrigin string
	Counter      uint64
}

// StreamingRecognizeClientMockRecvResults contains results of the StreamingRecognizeClient.Recv
type StreamingRecognizeClientMockRecvResults struct {
	sp1 *speechpb.StreamingRecognizeResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRecv *mStreamingRecognizeClientMockRecv) Optional() *mStreamingRecognizeClientMockRecv {
	mmRecv.optional = true
	return mmRecv
}

// Expect sets up expected params for StreamingRecognizeClient.Recv
func (mmRecv *mStreamingRecognizeClientMockRecv) Expect() *mStreamingRecognizeClientMockRecv {
	if mmRecv.mock.funcRecv != nil {
		mmRecv.mock.t.Fatalf("StreamingRecognizeClientMock.Recv mock is already set by Set")
	}

	if mmRecv.defaultExpectation == nil {
		mmRecv.defaultExpectation = &StreamingRecognizeClientMockRecvExpectation{}
	}

	return mmRecv
}

// Inspect accepts an inspector function that has same arguments as the StreamingRecognizeClient.Recv
func (mmRecv *mStreamingRecognizeClientMockRecv) Inspect(f func()) *mStreamingRecognizeClientMockRecv {
	if mmRecv.mock.inspectFuncRecv != nil {
		mmRecv.mock.t.Fatalf("Inspect function is already set for StreamingRecognizeClientMock.Recv")
	}

	mmRecv.mock.inspectFuncRecv = f

	return mmRecv
}

// Return sets up results that will be returned by StreamingRecognizeClient.Recv
func (mmRecv *mStreamingRecognizeClientMockRecv) Return(sp1 *speechpb.StreamingRecognizeResponse, err error) *StreamingRecognizeClientMock {
	if mmRecv.mock.funcRecv != nil {
		mmRecv.mock.t.Fatalf("StreamingRecognizeClientMock.Recv mock is already set by Set")
	}

	if mmRecv.defaultExpectation == nil {
		mmRecv.defaultExpectation = &StreamingRecognizeClientMockRecvExpectation{mock: mmRecv.mock}
	}
	mmRecv.defaultExpectation.results = &StreamingRecognizeClientMockRecvResults{sp1, err}
	mmRecv.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRecv.mock
}

// Set uses given function f to mock the StreamingRecognizeClient.Recv method
func (mmRecv *mStreamingRecognizeClientMockRecv) Set(f func() (sp1 *speechpb.StreamingRecognizeResponse, err error)) *StreamingRecognizeClientMock {
	if mmRecv.defaultExpectation != nil {
		mmRecv.mock.t.Fatalf("Default expectation is already set for the StreamingRecognizeClient.Recv method")
	}

	if len(mmRecv.expectations) > 0 {
		mmRecv.mock.t.Fatalf("Some expectations are already set for the StreamingRecognizeClient.Recv method")
	}

	mmRecv.mock.funcRecv = f
	mmRecv.mock.funcRecvOrigin = minimock.CallerInfo(1)
	return mmRecv.mock
}

// Times sets number of times StreamingRecognizeClient.Recv should be invoked
func (mmRecv *mStreamingRecognizeClientMockRecv) Times(n uint64) *mStreamingRecognizeClientMockRecv {
	if n == 0 {
		mmRecv.mock.t.Fatalf("Times of StreamingRecognizeClientMock.Recv mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRecv.expectedInvocations, n)
	mmRecv.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRecv
}

func (mmRecv *mStreamingRecognizeClientMockRecv) invocationsDone() bool {
	if len(mmRecv.expectations) == 0 && mmRecv.defaultExpectation == nil && mmRecv.mock.funcRecv == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRecv.mock.afterRecvCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRecv.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Recv implements StreamingRecognizeClient
func (mmRecv *StreamingRecognizeClientMock) Recv() (sp1 *speechpb.StreamingRecognizeResponse, err error) {
	mm_atomic.AddUint64(&mmRecv.beforeRecvCounter, 1)
	defer mm_atomic.AddUint64(&mmRecv.afterRecvCounter, 1)

	mmRecv.t.Helper()

	if mmRecv.inspectFuncRecv != nil {
		mmRecv.inspectFuncRecv()
	}

	if mmRecv.RecvMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRecv.RecvMock.defaultExpectation.Counter, 1)

		mm_results := mmRecv.RecvMock.defaultExpectation.results
		if mm_results == nil {
			mmRecv.t.Fatal("No results are set for the StreamingRecognizeClientMock.Recv")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmRecv.funcRecv != nil {
		return mmRecv.funcRecv()
	}
	mmRecv.t.Fatalf("Unexpected call to StreamingRecognizeClientMock.Recv.")
	return
}

// RecvAfterCounter returns a count of finished StreamingRecognizeClientMock.Recv invocations
func (mmRecv *StreamingRecognizeClientMock) RecvAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRecv.afterRecvCounter)
}

// RecvBeforeCounter returns a count of StreamingRecognizeClientMock.Recv invocations
func (mmRecv *StreamingRecognizeClientMock) RecvBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRecv.beforeRecvCounter)
}

// MinimockRecvDone returns true if the count of the Recv invocations corresponds
// the number of defined expectations
func (m *StreamingRecognizeClientMock) MinimockRecvDone() bool {
	if m.RecvMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RecvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RecvMock.invocationsDone()
}

// MinimockRecvInspect logs each unmet expectation
func (m *StreamingRecognizeClientMock) MinimockRecvInspect() {
	for _, e := range m.RecvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StreamingRecognizeClientMock.Recv")
		}
	}

	afterRecvCounter := mm_atomic.LoadUint64(&m.afterRecvCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RecvMock.defaultExpectation != nil && afterRecvCounter < 1 {
		m.t.Errorf("Expected call to StreamingRecognizeClientMock.Recv at\n%s", m.RecvMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRecv != nil && afterRecvCounter < 1 {
		m.t.Errorf("Expected call to StreamingRecognizeClientMock.Recv at\n%s", m.funcRecvOrigin)
	}

	if !m.RecvMock.invocationsDone() && afterRecvCounter > 0 {
		m.t.Errorf("Expected %d calls to StreamingRecognizeClientMock.Recv at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RecvMock.expectedInvocations), m.RecvMock.expectedInvocationsOrigin, afterRecvCounter)
	}
}

type mStreamingRecognizeClientMockSend struct {
	optional           bool
	mock               *StreamingRecognizeClientMock
	defaultExpectation *StreamingRecognizeClientMockSendExpectation
	expectations       []*StreamingRecognizeClientMockSendExpectation

	callArgs []*StreamingRecognizeClientMockSendParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StreamingRecognizeClientMockSendExpectation specifies expectation struct of the StreamingRecognizeClient.Send
type StreamingRecognizeClientMockSendExpectation struct {
	mock               *StreamingRecognizeClientMock
	params             *StreamingRecognizeClientMockSendParams
	paramPtrs          *StreamingRecognizeClientMockSendParamPtrs
	expectationOrigins StreamingRecognizeClientMockSendExpectationOrigins
	results            *StreamingRecognizeClientMockSendResults
	returnOrigin       string
	Counter            uint64
}

// StreamingRecognizeClientMockSendParams contains parameters of the StreamingRecognizeClient.Send
type StreamingRecognizeClientMockSendParams struct {
	sp1 *speechpb.StreamingRecognizeRequest
}

// StreamingRecognizeClientMockSendParamPtrs contains pointers to parameters of the StreamingRecognizeClient.Send
type StreamingRecognizeClientMockSendParamPtrs struct {
	sp1 **speechpb.StreamingRecognizeRequest
}

// StreamingRecognizeClientMockSendResults contains results of the StreamingRecognizeClient.Send
type StreamingRecognizeClientMockSendResults struct {
	err error
}

// StreamingRecognizeClientMockSendOrigins contains origins of expectations of the StreamingRecognizeClient.Send
type StreamingRecognizeClientMockSendExpectationOrigins struct {
	origin    string
	originSp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSend *mStreamingRecognizeClientMockSend) Optional() *mStreamingRecognizeClientMockSend {
	mmSend.optional = true
	return mmSend
}

// Expect sets up expected params for StreamingRecognizeClient.Send
func (mmSend *mStreamingRecognizeClientMockSend) Expect(sp1 *speechpb.StreamingRecognizeRequest) *mStreamingRecognizeClientMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("StreamingRecognizeClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &StreamingRecognizeClientMockSendExpectation{}
	}

	if mmSend.defaultExpectation.paramPtrs != nil {
		mmSend.mock.t.Fatalf("StreamingRecognizeClientMock.Send mock is already set by ExpectParams functions")
	}

	mmSend.defaultExpectation.params = &StreamingRecognizeClientMockSendParams{sp1}
	mmSend.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSend.expectations {
		if minimock.Equal(e.params, mmSend.defaultExpectation.params) {
			mmSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSend.defaultExpectation.params)
		}
	}

	return mmSend
}

// ExpectSp1Param1 sets up expected param sp1 for StreamingRecognizeClient.Send
func (mmSend *mStreamingRecognizeClientMockSend) ExpectSp1Param1(sp1 *speechpb.StreamingRecognizeRequest) *mStreamingRecognizeClientMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("StreamingRecognizeClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &StreamingRecognizeClientMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("StreamingRecognizeClientMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &StreamingRecognizeClientMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.sp1 = &sp1
	mmSend.defaultExpectation.expectationOrigins.originSp1 = minimock.CallerInfo(1)

	return mmSend
}

// Inspect accepts an inspector function that has same arguments as the StreamingRecognizeClient.Send
func (mmSend *mStreamingRecognizeClientMockSend) Inspect(f func(sp1 *speechpb.StreamingRecognizeRequest)) *mStreamingRecognizeClientMockSend {
	if mmSend.mock.inspectFuncSend != nil {
		mmSend.mock.t.Fatalf("Inspect function is already set for StreamingRecognizeClientMock.Send")
	}

	mmSend.mock.inspectFuncSend = f

	return mmSend
}

// Return sets up results that will be returned by StreamingRecognizeClient.Send
func (mmSend *mStreamingRecognizeClientMockSend) Return(err error) *StreamingRecognizeClientMock {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("StreamingRecognizeClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &StreamingRecognizeClientMockSendExpectation{mock: mmSend.mock}
	}
	mmSend.defaultExpectation.results = &StreamingRecognizeClientMockSendResults{err}
	mmSend.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// Set uses given function f to mock the StreamingRecognizeClient.Send method
func (mmSend *mStreamingRecognizeClientMockSend) Set(f func(sp1 *speechpb.StreamingRecognizeRequest) (err error)) *StreamingRecognizeClientMock {
	if mmSend.defaultExpectation != nil {
		mmSend.mock.t.Fatalf("Default expectation is already set for the StreamingRecognizeClient.Send method")
	}

	if len(mmSend.expectations) > 0 {
		mmSend.mock.t.Fatalf("Some expectations are already set for the StreamingRecognizeClient.Send method")
	}

	mmSend.mock.funcSend = f
	mmSend.mock.funcSendOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// When sets expectation for the StreamingRecognizeClient.Send which will trigger the result defined by the following
// Then helper
func (mmSend *mStreamingRecognizeClientMockSend) When(sp1 *speechpb.StreamingRecognizeRequest) *StreamingRecognizeClientMockSendExpectation {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("StreamingRecognizeClientMock.Send mock is already set by Set")
	}

	expectation := &StreamingRecognizeClientMockSendExpectation{
		mock:               mmSend.mock,
		params:             &StreamingRecognizeClientMockSendParams{sp1},
		expectationOrigins: StreamingRecognizeClientMockSendExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSend.expectations = append(mmSend.expectations, expectation)
	return expectation
}

// Then sets up StreamingRecognizeClient.Send return parameters for the expectation previously defined by the When method
func (e *StreamingRecognizeClientMockSendExpectation) Then(err error) *StreamingRecognizeClientMock {
	e.results = &StreamingRecognizeClientMockSendResults{err}
	return e.mock
}

// Times sets number of times StreamingRecognizeClient.Send should be invoked
func (mmSend *mStreamingRecognizeClientMockSend) Times(n uint64) *mStreamingRecognizeClientMockSend {
	if n == 0 {
		mmSend.mock.t.Fatalf("Times of StreamingRecognizeClientMock.Send mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSend.expectedInvocations, n)
	mmSend.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSend
}

func (mmSend *mStreamingRecognizeClientMockSend) invocationsDone() bool {
	if len(mmSend.expectations) == 0 && mmSend.defaultExpectation == nil && mmSend.mock.funcSend == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSend.mock.afterSendCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSend.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Send implements StreamingRecognizeClient
func (mmSend *StreamingRecognizeClientMock) Send(sp1 *speechpb.StreamingRecognizeRequest) (err error) {
	mm_atomic.AddUint64(&mmSend.beforeSendCounter, 1)
	defer mm_atomic.AddUint64(&mmSend.afterSendCounter, 1)

	mmSend.t.Helper()

	if mmSend.inspectFuncSend != nil {
		mmSend.inspectFuncSend(sp1)
	}

	mm_params := StreamingRecognizeClientMockSendParams{sp1}

	// Record call args
	mmSend.SendMock.mutex.Lock()
	mmSend.SendMock.callArgs = append(mmSend.SendMock.callArgs, &mm_params)
	mmSend.SendMock.mutex.Unlock()

	for _, e := range mmSend.SendMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSend.SendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSend.SendMock.defaultExpectation.Counter, 1)
		mm_want := mmSend.SendMock.defaultExpectation.params
		mm_want_ptrs := mmSend.SendMock.defaultExpectation.paramPtrs

		mm_got := StreamingRecognizeClientMockSendParams{sp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.sp1 != nil && !minimock.Equal(*mm_want_ptrs.sp1, mm_got.sp1) {
				mmSend.t.Errorf("StreamingRecognizeClientMock.Send got unexpected parameter sp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originSp1, *mm_want_ptrs.sp1, mm_got.sp1, minimock.Diff(*mm_want_ptrs.sp1, mm_got.sp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSend.t.Errorf("StreamingRecognizeClientMock.Send got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSend.SendMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSend.SendMock.defaultExpectation.results
		if mm_results == nil {
			mmSend.t.Fatal("No results are set for the StreamingRecognizeClientMock.Send")
		}
		return (*mm_results).err
	}
	if mmSend.funcSend != nil {
		return mmSend.funcSend(sp1)
	}
	mmSend.t.Fatalf("Unexpected call to StreamingRecognizeClientMock.Send. %v", sp1)
	return
}

// SendAfterCounter returns a count of finished StreamingRecognizeClientMock.Send invocations
func (mmSend *StreamingRecognizeClientMock) SendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.afterSendCounter)
}

// SendBeforeCounter returns a count of StreamingRecognizeClientMock.Send invocations
func (mmSend *StreamingRecognizeClientMock) SendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.beforeSendCounter)
}

// Calls returns a list of arguments used in each call to StreamingRecognizeClientMock.Send.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSend *mStreamingRecognizeClientMockSend) Calls() []*StreamingRecognizeClientMockSendParams {
	mmSend.mutex.RLock()

	argCopy := make([]*StreamingRecognizeClientMockSendParams, len(mmSend.callArgs))
	copy(argCopy, mmSend.callArgs)

	mmSend.mutex.RUnlock()

	return argCopy
}

// MinimockSendDone returns true if the count of the Send invocations corresponds
// the number of defined expectations
func (m *StreamingRecognizeClientMock) MinimockSendDone() bool {
	if m.SendMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMock.invocationsDone()
}

// MinimockSendInspect logs each unmet expectation
func (m *StreamingRecognizeClientMock) MinimockSendInspect() {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StreamingRecognizeClientMock.Send at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendCounter := mm_atomic.LoadUint64(&m.afterSendCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && afterSendCounter < 1 {
		if m.SendMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StreamingRecognizeClientMock.Send at\n%s", m.SendMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StreamingRecognizeClientMock.Send at\n%s with params: %#v", m.SendMock.defaultExpectation.expectationOrigins.origin, *m.SendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && afterSendCounter < 1 {
		m.t.Errorf("Expected call to StreamingRecognizeClientMock.Send at\n%s", m.funcSendOrigin)
	}

	if !m.SendMock.invocationsDone() && afterSendCounter > 0 {
		m.t.Errorf("Expected %d calls to StreamingRecognizeClientMock.Send at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMock.expectedInvocations), m.SendMock.expectedInvocationsOrigin, afterSendCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StreamingRecognizeClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCloseSendInspect()

			m.MinimockRecvInspect()

			m.MinimockSendInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StreamingRecognizeClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StreamingRecognizeClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseSendDone() &&
		m.MinimockRecvDone() &&
		m.MinimockSendDone()
}
