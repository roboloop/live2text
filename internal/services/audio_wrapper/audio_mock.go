// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package audiowrapper

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// AudioMock implements Audio
type AudioMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcClose          func() (err error)
	funcCloseOrigin    string
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mAudioMockClose

	funcDevices          func() (dpa1 []*DeviceInfo, err error)
	funcDevicesOrigin    string
	inspectFuncDevices   func()
	afterDevicesCounter  uint64
	beforeDevicesCounter uint64
	DevicesMock          mAudioMockDevices

	funcStreamDevice          func(info *DeviceInfo, params *StreamParameters) (s1 Stream, err error)
	funcStreamDeviceOrigin    string
	inspectFuncStreamDevice   func(info *DeviceInfo, params *StreamParameters)
	afterStreamDeviceCounter  uint64
	beforeStreamDeviceCounter uint64
	StreamDeviceMock          mAudioMockStreamDevice
}

// NewAudioMock returns a mock for Audio
func NewAudioMock(t minimock.Tester) *AudioMock {
	m := &AudioMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mAudioMockClose{mock: m}

	m.DevicesMock = mAudioMockDevices{mock: m}

	m.StreamDeviceMock = mAudioMockStreamDevice{mock: m}
	m.StreamDeviceMock.callArgs = []*AudioMockStreamDeviceParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAudioMockClose struct {
	optional           bool
	mock               *AudioMock
	defaultExpectation *AudioMockCloseExpectation
	expectations       []*AudioMockCloseExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AudioMockCloseExpectation specifies expectation struct of the Audio.Close
type AudioMockCloseExpectation struct {
	mock *AudioMock

	results      *AudioMockCloseResults
	returnOrigin string
	Counter      uint64
}

// AudioMockCloseResults contains results of the Audio.Close
type AudioMockCloseResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmClose *mAudioMockClose) Optional() *mAudioMockClose {
	mmClose.optional = true
	return mmClose
}

// Expect sets up expected params for Audio.Close
func (mmClose *mAudioMockClose) Expect() *mAudioMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("AudioMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &AudioMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the Audio.Close
func (mmClose *mAudioMockClose) Inspect(f func()) *mAudioMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for AudioMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by Audio.Close
func (mmClose *mAudioMockClose) Return(err error) *AudioMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("AudioMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &AudioMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &AudioMockCloseResults{err}
	mmClose.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// Set uses given function f to mock the Audio.Close method
func (mmClose *mAudioMockClose) Set(f func() (err error)) *AudioMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the Audio.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the Audio.Close method")
	}

	mmClose.mock.funcClose = f
	mmClose.mock.funcCloseOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// Times sets number of times Audio.Close should be invoked
func (mmClose *mAudioMockClose) Times(n uint64) *mAudioMockClose {
	if n == 0 {
		mmClose.mock.t.Fatalf("Times of AudioMock.Close mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmClose.expectedInvocations, n)
	mmClose.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmClose
}

func (mmClose *mAudioMockClose) invocationsDone() bool {
	if len(mmClose.expectations) == 0 && mmClose.defaultExpectation == nil && mmClose.mock.funcClose == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmClose.mock.afterCloseCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmClose.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Close implements Audio
func (mmClose *AudioMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	mmClose.t.Helper()

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the AudioMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to AudioMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished AudioMock.Close invocations
func (mmClose *AudioMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of AudioMock.Close invocations
func (mmClose *AudioMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *AudioMock) MinimockCloseDone() bool {
	if m.CloseMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseMock.invocationsDone()
}

// MinimockCloseInspect logs each unmet expectation
func (m *AudioMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to AudioMock.Close")
		}
	}

	afterCloseCounter := mm_atomic.LoadUint64(&m.afterCloseCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && afterCloseCounter < 1 {
		m.t.Errorf("Expected call to AudioMock.Close at\n%s", m.CloseMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && afterCloseCounter < 1 {
		m.t.Errorf("Expected call to AudioMock.Close at\n%s", m.funcCloseOrigin)
	}

	if !m.CloseMock.invocationsDone() && afterCloseCounter > 0 {
		m.t.Errorf("Expected %d calls to AudioMock.Close at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CloseMock.expectedInvocations), m.CloseMock.expectedInvocationsOrigin, afterCloseCounter)
	}
}

type mAudioMockDevices struct {
	optional           bool
	mock               *AudioMock
	defaultExpectation *AudioMockDevicesExpectation
	expectations       []*AudioMockDevicesExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AudioMockDevicesExpectation specifies expectation struct of the Audio.Devices
type AudioMockDevicesExpectation struct {
	mock *AudioMock

	results      *AudioMockDevicesResults
	returnOrigin string
	Counter      uint64
}

// AudioMockDevicesResults contains results of the Audio.Devices
type AudioMockDevicesResults struct {
	dpa1 []*DeviceInfo
	err  error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDevices *mAudioMockDevices) Optional() *mAudioMockDevices {
	mmDevices.optional = true
	return mmDevices
}

// Expect sets up expected params for Audio.Devices
func (mmDevices *mAudioMockDevices) Expect() *mAudioMockDevices {
	if mmDevices.mock.funcDevices != nil {
		mmDevices.mock.t.Fatalf("AudioMock.Devices mock is already set by Set")
	}

	if mmDevices.defaultExpectation == nil {
		mmDevices.defaultExpectation = &AudioMockDevicesExpectation{}
	}

	return mmDevices
}

// Inspect accepts an inspector function that has same arguments as the Audio.Devices
func (mmDevices *mAudioMockDevices) Inspect(f func()) *mAudioMockDevices {
	if mmDevices.mock.inspectFuncDevices != nil {
		mmDevices.mock.t.Fatalf("Inspect function is already set for AudioMock.Devices")
	}

	mmDevices.mock.inspectFuncDevices = f

	return mmDevices
}

// Return sets up results that will be returned by Audio.Devices
func (mmDevices *mAudioMockDevices) Return(dpa1 []*DeviceInfo, err error) *AudioMock {
	if mmDevices.mock.funcDevices != nil {
		mmDevices.mock.t.Fatalf("AudioMock.Devices mock is already set by Set")
	}

	if mmDevices.defaultExpectation == nil {
		mmDevices.defaultExpectation = &AudioMockDevicesExpectation{mock: mmDevices.mock}
	}
	mmDevices.defaultExpectation.results = &AudioMockDevicesResults{dpa1, err}
	mmDevices.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDevices.mock
}

// Set uses given function f to mock the Audio.Devices method
func (mmDevices *mAudioMockDevices) Set(f func() (dpa1 []*DeviceInfo, err error)) *AudioMock {
	if mmDevices.defaultExpectation != nil {
		mmDevices.mock.t.Fatalf("Default expectation is already set for the Audio.Devices method")
	}

	if len(mmDevices.expectations) > 0 {
		mmDevices.mock.t.Fatalf("Some expectations are already set for the Audio.Devices method")
	}

	mmDevices.mock.funcDevices = f
	mmDevices.mock.funcDevicesOrigin = minimock.CallerInfo(1)
	return mmDevices.mock
}

// Times sets number of times Audio.Devices should be invoked
func (mmDevices *mAudioMockDevices) Times(n uint64) *mAudioMockDevices {
	if n == 0 {
		mmDevices.mock.t.Fatalf("Times of AudioMock.Devices mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDevices.expectedInvocations, n)
	mmDevices.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDevices
}

func (mmDevices *mAudioMockDevices) invocationsDone() bool {
	if len(mmDevices.expectations) == 0 && mmDevices.defaultExpectation == nil && mmDevices.mock.funcDevices == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDevices.mock.afterDevicesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDevices.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Devices implements Audio
func (mmDevices *AudioMock) Devices() (dpa1 []*DeviceInfo, err error) {
	mm_atomic.AddUint64(&mmDevices.beforeDevicesCounter, 1)
	defer mm_atomic.AddUint64(&mmDevices.afterDevicesCounter, 1)

	mmDevices.t.Helper()

	if mmDevices.inspectFuncDevices != nil {
		mmDevices.inspectFuncDevices()
	}

	if mmDevices.DevicesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDevices.DevicesMock.defaultExpectation.Counter, 1)

		mm_results := mmDevices.DevicesMock.defaultExpectation.results
		if mm_results == nil {
			mmDevices.t.Fatal("No results are set for the AudioMock.Devices")
		}
		return (*mm_results).dpa1, (*mm_results).err
	}
	if mmDevices.funcDevices != nil {
		return mmDevices.funcDevices()
	}
	mmDevices.t.Fatalf("Unexpected call to AudioMock.Devices.")
	return
}

// DevicesAfterCounter returns a count of finished AudioMock.Devices invocations
func (mmDevices *AudioMock) DevicesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDevices.afterDevicesCounter)
}

// DevicesBeforeCounter returns a count of AudioMock.Devices invocations
func (mmDevices *AudioMock) DevicesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDevices.beforeDevicesCounter)
}

// MinimockDevicesDone returns true if the count of the Devices invocations corresponds
// the number of defined expectations
func (m *AudioMock) MinimockDevicesDone() bool {
	if m.DevicesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DevicesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DevicesMock.invocationsDone()
}

// MinimockDevicesInspect logs each unmet expectation
func (m *AudioMock) MinimockDevicesInspect() {
	for _, e := range m.DevicesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to AudioMock.Devices")
		}
	}

	afterDevicesCounter := mm_atomic.LoadUint64(&m.afterDevicesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DevicesMock.defaultExpectation != nil && afterDevicesCounter < 1 {
		m.t.Errorf("Expected call to AudioMock.Devices at\n%s", m.DevicesMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDevices != nil && afterDevicesCounter < 1 {
		m.t.Errorf("Expected call to AudioMock.Devices at\n%s", m.funcDevicesOrigin)
	}

	if !m.DevicesMock.invocationsDone() && afterDevicesCounter > 0 {
		m.t.Errorf("Expected %d calls to AudioMock.Devices at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DevicesMock.expectedInvocations), m.DevicesMock.expectedInvocationsOrigin, afterDevicesCounter)
	}
}

type mAudioMockStreamDevice struct {
	optional           bool
	mock               *AudioMock
	defaultExpectation *AudioMockStreamDeviceExpectation
	expectations       []*AudioMockStreamDeviceExpectation

	callArgs []*AudioMockStreamDeviceParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AudioMockStreamDeviceExpectation specifies expectation struct of the Audio.StreamDevice
type AudioMockStreamDeviceExpectation struct {
	mock               *AudioMock
	params             *AudioMockStreamDeviceParams
	paramPtrs          *AudioMockStreamDeviceParamPtrs
	expectationOrigins AudioMockStreamDeviceExpectationOrigins
	results            *AudioMockStreamDeviceResults
	returnOrigin       string
	Counter            uint64
}

// AudioMockStreamDeviceParams contains parameters of the Audio.StreamDevice
type AudioMockStreamDeviceParams struct {
	info   *DeviceInfo
	params *StreamParameters
}

// AudioMockStreamDeviceParamPtrs contains pointers to parameters of the Audio.StreamDevice
type AudioMockStreamDeviceParamPtrs struct {
	info   **DeviceInfo
	params **StreamParameters
}

// AudioMockStreamDeviceResults contains results of the Audio.StreamDevice
type AudioMockStreamDeviceResults struct {
	s1  Stream
	err error
}

// AudioMockStreamDeviceOrigins contains origins of expectations of the Audio.StreamDevice
type AudioMockStreamDeviceExpectationOrigins struct {
	origin       string
	originInfo   string
	originParams string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStreamDevice *mAudioMockStreamDevice) Optional() *mAudioMockStreamDevice {
	mmStreamDevice.optional = true
	return mmStreamDevice
}

// Expect sets up expected params for Audio.StreamDevice
func (mmStreamDevice *mAudioMockStreamDevice) Expect(info *DeviceInfo, params *StreamParameters) *mAudioMockStreamDevice {
	if mmStreamDevice.mock.funcStreamDevice != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by Set")
	}

	if mmStreamDevice.defaultExpectation == nil {
		mmStreamDevice.defaultExpectation = &AudioMockStreamDeviceExpectation{}
	}

	if mmStreamDevice.defaultExpectation.paramPtrs != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by ExpectParams functions")
	}

	mmStreamDevice.defaultExpectation.params = &AudioMockStreamDeviceParams{info, params}
	mmStreamDevice.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStreamDevice.expectations {
		if minimock.Equal(e.params, mmStreamDevice.defaultExpectation.params) {
			mmStreamDevice.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStreamDevice.defaultExpectation.params)
		}
	}

	return mmStreamDevice
}

// ExpectInfoParam1 sets up expected param info for Audio.StreamDevice
func (mmStreamDevice *mAudioMockStreamDevice) ExpectInfoParam1(info *DeviceInfo) *mAudioMockStreamDevice {
	if mmStreamDevice.mock.funcStreamDevice != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by Set")
	}

	if mmStreamDevice.defaultExpectation == nil {
		mmStreamDevice.defaultExpectation = &AudioMockStreamDeviceExpectation{}
	}

	if mmStreamDevice.defaultExpectation.params != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by Expect")
	}

	if mmStreamDevice.defaultExpectation.paramPtrs == nil {
		mmStreamDevice.defaultExpectation.paramPtrs = &AudioMockStreamDeviceParamPtrs{}
	}
	mmStreamDevice.defaultExpectation.paramPtrs.info = &info
	mmStreamDevice.defaultExpectation.expectationOrigins.originInfo = minimock.CallerInfo(1)

	return mmStreamDevice
}

// ExpectParamsParam2 sets up expected param params for Audio.StreamDevice
func (mmStreamDevice *mAudioMockStreamDevice) ExpectParamsParam2(params *StreamParameters) *mAudioMockStreamDevice {
	if mmStreamDevice.mock.funcStreamDevice != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by Set")
	}

	if mmStreamDevice.defaultExpectation == nil {
		mmStreamDevice.defaultExpectation = &AudioMockStreamDeviceExpectation{}
	}

	if mmStreamDevice.defaultExpectation.params != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by Expect")
	}

	if mmStreamDevice.defaultExpectation.paramPtrs == nil {
		mmStreamDevice.defaultExpectation.paramPtrs = &AudioMockStreamDeviceParamPtrs{}
	}
	mmStreamDevice.defaultExpectation.paramPtrs.params = &params
	mmStreamDevice.defaultExpectation.expectationOrigins.originParams = minimock.CallerInfo(1)

	return mmStreamDevice
}

// Inspect accepts an inspector function that has same arguments as the Audio.StreamDevice
func (mmStreamDevice *mAudioMockStreamDevice) Inspect(f func(info *DeviceInfo, params *StreamParameters)) *mAudioMockStreamDevice {
	if mmStreamDevice.mock.inspectFuncStreamDevice != nil {
		mmStreamDevice.mock.t.Fatalf("Inspect function is already set for AudioMock.StreamDevice")
	}

	mmStreamDevice.mock.inspectFuncStreamDevice = f

	return mmStreamDevice
}

// Return sets up results that will be returned by Audio.StreamDevice
func (mmStreamDevice *mAudioMockStreamDevice) Return(s1 Stream, err error) *AudioMock {
	if mmStreamDevice.mock.funcStreamDevice != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by Set")
	}

	if mmStreamDevice.defaultExpectation == nil {
		mmStreamDevice.defaultExpectation = &AudioMockStreamDeviceExpectation{mock: mmStreamDevice.mock}
	}
	mmStreamDevice.defaultExpectation.results = &AudioMockStreamDeviceResults{s1, err}
	mmStreamDevice.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStreamDevice.mock
}

// Set uses given function f to mock the Audio.StreamDevice method
func (mmStreamDevice *mAudioMockStreamDevice) Set(f func(info *DeviceInfo, params *StreamParameters) (s1 Stream, err error)) *AudioMock {
	if mmStreamDevice.defaultExpectation != nil {
		mmStreamDevice.mock.t.Fatalf("Default expectation is already set for the Audio.StreamDevice method")
	}

	if len(mmStreamDevice.expectations) > 0 {
		mmStreamDevice.mock.t.Fatalf("Some expectations are already set for the Audio.StreamDevice method")
	}

	mmStreamDevice.mock.funcStreamDevice = f
	mmStreamDevice.mock.funcStreamDeviceOrigin = minimock.CallerInfo(1)
	return mmStreamDevice.mock
}

// When sets expectation for the Audio.StreamDevice which will trigger the result defined by the following
// Then helper
func (mmStreamDevice *mAudioMockStreamDevice) When(info *DeviceInfo, params *StreamParameters) *AudioMockStreamDeviceExpectation {
	if mmStreamDevice.mock.funcStreamDevice != nil {
		mmStreamDevice.mock.t.Fatalf("AudioMock.StreamDevice mock is already set by Set")
	}

	expectation := &AudioMockStreamDeviceExpectation{
		mock:               mmStreamDevice.mock,
		params:             &AudioMockStreamDeviceParams{info, params},
		expectationOrigins: AudioMockStreamDeviceExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStreamDevice.expectations = append(mmStreamDevice.expectations, expectation)
	return expectation
}

// Then sets up Audio.StreamDevice return parameters for the expectation previously defined by the When method
func (e *AudioMockStreamDeviceExpectation) Then(s1 Stream, err error) *AudioMock {
	e.results = &AudioMockStreamDeviceResults{s1, err}
	return e.mock
}

// Times sets number of times Audio.StreamDevice should be invoked
func (mmStreamDevice *mAudioMockStreamDevice) Times(n uint64) *mAudioMockStreamDevice {
	if n == 0 {
		mmStreamDevice.mock.t.Fatalf("Times of AudioMock.StreamDevice mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStreamDevice.expectedInvocations, n)
	mmStreamDevice.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStreamDevice
}

func (mmStreamDevice *mAudioMockStreamDevice) invocationsDone() bool {
	if len(mmStreamDevice.expectations) == 0 && mmStreamDevice.defaultExpectation == nil && mmStreamDevice.mock.funcStreamDevice == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStreamDevice.mock.afterStreamDeviceCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStreamDevice.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StreamDevice implements Audio
func (mmStreamDevice *AudioMock) StreamDevice(info *DeviceInfo, params *StreamParameters) (s1 Stream, err error) {
	mm_atomic.AddUint64(&mmStreamDevice.beforeStreamDeviceCounter, 1)
	defer mm_atomic.AddUint64(&mmStreamDevice.afterStreamDeviceCounter, 1)

	mmStreamDevice.t.Helper()

	if mmStreamDevice.inspectFuncStreamDevice != nil {
		mmStreamDevice.inspectFuncStreamDevice(info, params)
	}

	mm_params := AudioMockStreamDeviceParams{info, params}

	// Record call args
	mmStreamDevice.StreamDeviceMock.mutex.Lock()
	mmStreamDevice.StreamDeviceMock.callArgs = append(mmStreamDevice.StreamDeviceMock.callArgs, &mm_params)
	mmStreamDevice.StreamDeviceMock.mutex.Unlock()

	for _, e := range mmStreamDevice.StreamDeviceMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmStreamDevice.StreamDeviceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStreamDevice.StreamDeviceMock.defaultExpectation.Counter, 1)
		mm_want := mmStreamDevice.StreamDeviceMock.defaultExpectation.params
		mm_want_ptrs := mmStreamDevice.StreamDeviceMock.defaultExpectation.paramPtrs

		mm_got := AudioMockStreamDeviceParams{info, params}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmStreamDevice.t.Errorf("AudioMock.StreamDevice got unexpected parameter info, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamDevice.StreamDeviceMock.defaultExpectation.expectationOrigins.originInfo, *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

			if mm_want_ptrs.params != nil && !minimock.Equal(*mm_want_ptrs.params, mm_got.params) {
				mmStreamDevice.t.Errorf("AudioMock.StreamDevice got unexpected parameter params, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamDevice.StreamDeviceMock.defaultExpectation.expectationOrigins.originParams, *mm_want_ptrs.params, mm_got.params, minimock.Diff(*mm_want_ptrs.params, mm_got.params))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStreamDevice.t.Errorf("AudioMock.StreamDevice got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStreamDevice.StreamDeviceMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStreamDevice.StreamDeviceMock.defaultExpectation.results
		if mm_results == nil {
			mmStreamDevice.t.Fatal("No results are set for the AudioMock.StreamDevice")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmStreamDevice.funcStreamDevice != nil {
		return mmStreamDevice.funcStreamDevice(info, params)
	}
	mmStreamDevice.t.Fatalf("Unexpected call to AudioMock.StreamDevice. %v %v", info, params)
	return
}

// StreamDeviceAfterCounter returns a count of finished AudioMock.StreamDevice invocations
func (mmStreamDevice *AudioMock) StreamDeviceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStreamDevice.afterStreamDeviceCounter)
}

// StreamDeviceBeforeCounter returns a count of AudioMock.StreamDevice invocations
func (mmStreamDevice *AudioMock) StreamDeviceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStreamDevice.beforeStreamDeviceCounter)
}

// Calls returns a list of arguments used in each call to AudioMock.StreamDevice.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStreamDevice *mAudioMockStreamDevice) Calls() []*AudioMockStreamDeviceParams {
	mmStreamDevice.mutex.RLock()

	argCopy := make([]*AudioMockStreamDeviceParams, len(mmStreamDevice.callArgs))
	copy(argCopy, mmStreamDevice.callArgs)

	mmStreamDevice.mutex.RUnlock()

	return argCopy
}

// MinimockStreamDeviceDone returns true if the count of the StreamDevice invocations corresponds
// the number of defined expectations
func (m *AudioMock) MinimockStreamDeviceDone() bool {
	if m.StreamDeviceMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StreamDeviceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StreamDeviceMock.invocationsDone()
}

// MinimockStreamDeviceInspect logs each unmet expectation
func (m *AudioMock) MinimockStreamDeviceInspect() {
	for _, e := range m.StreamDeviceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AudioMock.StreamDevice at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStreamDeviceCounter := mm_atomic.LoadUint64(&m.afterStreamDeviceCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StreamDeviceMock.defaultExpectation != nil && afterStreamDeviceCounter < 1 {
		if m.StreamDeviceMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AudioMock.StreamDevice at\n%s", m.StreamDeviceMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AudioMock.StreamDevice at\n%s with params: %#v", m.StreamDeviceMock.defaultExpectation.expectationOrigins.origin, *m.StreamDeviceMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStreamDevice != nil && afterStreamDeviceCounter < 1 {
		m.t.Errorf("Expected call to AudioMock.StreamDevice at\n%s", m.funcStreamDeviceOrigin)
	}

	if !m.StreamDeviceMock.invocationsDone() && afterStreamDeviceCounter > 0 {
		m.t.Errorf("Expected %d calls to AudioMock.StreamDevice at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StreamDeviceMock.expectedInvocations), m.StreamDeviceMock.expectedInvocationsOrigin, afterStreamDeviceCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AudioMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCloseInspect()

			m.MinimockDevicesInspect()

			m.MinimockStreamDeviceInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AudioMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AudioMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockDevicesDone() &&
		m.MinimockStreamDeviceDone()
}
