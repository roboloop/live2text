// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package metrics

import (
	"io"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MetricsMock implements Metrics
type MetricsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddBytesReadFromAudio          func(bytes int)
	funcAddBytesReadFromAudioOrigin    string
	inspectFuncAddBytesReadFromAudio   func(bytes int)
	afterAddBytesReadFromAudioCounter  uint64
	beforeAddBytesReadFromAudioCounter uint64
	AddBytesReadFromAudioMock          mMetricsMockAddBytesReadFromAudio

	funcAddBytesSentToGoogleSpeech          func(bytes int)
	funcAddBytesSentToGoogleSpeechOrigin    string
	inspectFuncAddBytesSentToGoogleSpeech   func(bytes int)
	afterAddBytesSentToGoogleSpeechCounter  uint64
	beforeAddBytesSentToGoogleSpeechCounter uint64
	AddBytesSentToGoogleSpeechMock          mMetricsMockAddBytesSentToGoogleSpeech

	funcAddBytesWrittenOnDisk          func(bytes int)
	funcAddBytesWrittenOnDiskOrigin    string
	inspectFuncAddBytesWrittenOnDisk   func(bytes int)
	afterAddBytesWrittenOnDiskCounter  uint64
	beforeAddBytesWrittenOnDiskCounter uint64
	AddBytesWrittenOnDiskMock          mMetricsMockAddBytesWrittenOnDisk

	funcAddConnectionsToGoogleSpeech          func(n int)
	funcAddConnectionsToGoogleSpeechOrigin    string
	inspectFuncAddConnectionsToGoogleSpeech   func(n int)
	afterAddConnectionsToGoogleSpeechCounter  uint64
	beforeAddConnectionsToGoogleSpeechCounter uint64
	AddConnectionsToGoogleSpeechMock          mMetricsMockAddConnectionsToGoogleSpeech

	funcAddMillisecondsSentToGoogleSpeech          func(ms int)
	funcAddMillisecondsSentToGoogleSpeechOrigin    string
	inspectFuncAddMillisecondsSentToGoogleSpeech   func(ms int)
	afterAddMillisecondsSentToGoogleSpeechCounter  uint64
	beforeAddMillisecondsSentToGoogleSpeechCounter uint64
	AddMillisecondsSentToGoogleSpeechMock          mMetricsMockAddMillisecondsSentToGoogleSpeech

	funcWritePrometheus          func(w io.Writer)
	funcWritePrometheusOrigin    string
	inspectFuncWritePrometheus   func(w io.Writer)
	afterWritePrometheusCounter  uint64
	beforeWritePrometheusCounter uint64
	WritePrometheusMock          mMetricsMockWritePrometheus
}

// NewMetricsMock returns a mock for Metrics
func NewMetricsMock(t minimock.Tester) *MetricsMock {
	m := &MetricsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddBytesReadFromAudioMock = mMetricsMockAddBytesReadFromAudio{mock: m}
	m.AddBytesReadFromAudioMock.callArgs = []*MetricsMockAddBytesReadFromAudioParams{}

	m.AddBytesSentToGoogleSpeechMock = mMetricsMockAddBytesSentToGoogleSpeech{mock: m}
	m.AddBytesSentToGoogleSpeechMock.callArgs = []*MetricsMockAddBytesSentToGoogleSpeechParams{}

	m.AddBytesWrittenOnDiskMock = mMetricsMockAddBytesWrittenOnDisk{mock: m}
	m.AddBytesWrittenOnDiskMock.callArgs = []*MetricsMockAddBytesWrittenOnDiskParams{}

	m.AddConnectionsToGoogleSpeechMock = mMetricsMockAddConnectionsToGoogleSpeech{mock: m}
	m.AddConnectionsToGoogleSpeechMock.callArgs = []*MetricsMockAddConnectionsToGoogleSpeechParams{}

	m.AddMillisecondsSentToGoogleSpeechMock = mMetricsMockAddMillisecondsSentToGoogleSpeech{mock: m}
	m.AddMillisecondsSentToGoogleSpeechMock.callArgs = []*MetricsMockAddMillisecondsSentToGoogleSpeechParams{}

	m.WritePrometheusMock = mMetricsMockWritePrometheus{mock: m}
	m.WritePrometheusMock.callArgs = []*MetricsMockWritePrometheusParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMetricsMockAddBytesReadFromAudio struct {
	optional           bool
	mock               *MetricsMock
	defaultExpectation *MetricsMockAddBytesReadFromAudioExpectation
	expectations       []*MetricsMockAddBytesReadFromAudioExpectation

	callArgs []*MetricsMockAddBytesReadFromAudioParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetricsMockAddBytesReadFromAudioExpectation specifies expectation struct of the Metrics.AddBytesReadFromAudio
type MetricsMockAddBytesReadFromAudioExpectation struct {
	mock               *MetricsMock
	params             *MetricsMockAddBytesReadFromAudioParams
	paramPtrs          *MetricsMockAddBytesReadFromAudioParamPtrs
	expectationOrigins MetricsMockAddBytesReadFromAudioExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// MetricsMockAddBytesReadFromAudioParams contains parameters of the Metrics.AddBytesReadFromAudio
type MetricsMockAddBytesReadFromAudioParams struct {
	bytes int
}

// MetricsMockAddBytesReadFromAudioParamPtrs contains pointers to parameters of the Metrics.AddBytesReadFromAudio
type MetricsMockAddBytesReadFromAudioParamPtrs struct {
	bytes *int
}

// MetricsMockAddBytesReadFromAudioOrigins contains origins of expectations of the Metrics.AddBytesReadFromAudio
type MetricsMockAddBytesReadFromAudioExpectationOrigins struct {
	origin      string
	originBytes string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) Optional() *mMetricsMockAddBytesReadFromAudio {
	mmAddBytesReadFromAudio.optional = true
	return mmAddBytesReadFromAudio
}

// Expect sets up expected params for Metrics.AddBytesReadFromAudio
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) Expect(bytes int) *mMetricsMockAddBytesReadFromAudio {
	if mmAddBytesReadFromAudio.mock.funcAddBytesReadFromAudio != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("MetricsMock.AddBytesReadFromAudio mock is already set by Set")
	}

	if mmAddBytesReadFromAudio.defaultExpectation == nil {
		mmAddBytesReadFromAudio.defaultExpectation = &MetricsMockAddBytesReadFromAudioExpectation{}
	}

	if mmAddBytesReadFromAudio.defaultExpectation.paramPtrs != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("MetricsMock.AddBytesReadFromAudio mock is already set by ExpectParams functions")
	}

	mmAddBytesReadFromAudio.defaultExpectation.params = &MetricsMockAddBytesReadFromAudioParams{bytes}
	mmAddBytesReadFromAudio.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddBytesReadFromAudio.expectations {
		if minimock.Equal(e.params, mmAddBytesReadFromAudio.defaultExpectation.params) {
			mmAddBytesReadFromAudio.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddBytesReadFromAudio.defaultExpectation.params)
		}
	}

	return mmAddBytesReadFromAudio
}

// ExpectBytesParam1 sets up expected param bytes for Metrics.AddBytesReadFromAudio
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) ExpectBytesParam1(bytes int) *mMetricsMockAddBytesReadFromAudio {
	if mmAddBytesReadFromAudio.mock.funcAddBytesReadFromAudio != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("MetricsMock.AddBytesReadFromAudio mock is already set by Set")
	}

	if mmAddBytesReadFromAudio.defaultExpectation == nil {
		mmAddBytesReadFromAudio.defaultExpectation = &MetricsMockAddBytesReadFromAudioExpectation{}
	}

	if mmAddBytesReadFromAudio.defaultExpectation.params != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("MetricsMock.AddBytesReadFromAudio mock is already set by Expect")
	}

	if mmAddBytesReadFromAudio.defaultExpectation.paramPtrs == nil {
		mmAddBytesReadFromAudio.defaultExpectation.paramPtrs = &MetricsMockAddBytesReadFromAudioParamPtrs{}
	}
	mmAddBytesReadFromAudio.defaultExpectation.paramPtrs.bytes = &bytes
	mmAddBytesReadFromAudio.defaultExpectation.expectationOrigins.originBytes = minimock.CallerInfo(1)

	return mmAddBytesReadFromAudio
}

// Inspect accepts an inspector function that has same arguments as the Metrics.AddBytesReadFromAudio
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) Inspect(f func(bytes int)) *mMetricsMockAddBytesReadFromAudio {
	if mmAddBytesReadFromAudio.mock.inspectFuncAddBytesReadFromAudio != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("Inspect function is already set for MetricsMock.AddBytesReadFromAudio")
	}

	mmAddBytesReadFromAudio.mock.inspectFuncAddBytesReadFromAudio = f

	return mmAddBytesReadFromAudio
}

// Return sets up results that will be returned by Metrics.AddBytesReadFromAudio
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) Return() *MetricsMock {
	if mmAddBytesReadFromAudio.mock.funcAddBytesReadFromAudio != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("MetricsMock.AddBytesReadFromAudio mock is already set by Set")
	}

	if mmAddBytesReadFromAudio.defaultExpectation == nil {
		mmAddBytesReadFromAudio.defaultExpectation = &MetricsMockAddBytesReadFromAudioExpectation{mock: mmAddBytesReadFromAudio.mock}
	}

	mmAddBytesReadFromAudio.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddBytesReadFromAudio.mock
}

// Set uses given function f to mock the Metrics.AddBytesReadFromAudio method
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) Set(f func(bytes int)) *MetricsMock {
	if mmAddBytesReadFromAudio.defaultExpectation != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("Default expectation is already set for the Metrics.AddBytesReadFromAudio method")
	}

	if len(mmAddBytesReadFromAudio.expectations) > 0 {
		mmAddBytesReadFromAudio.mock.t.Fatalf("Some expectations are already set for the Metrics.AddBytesReadFromAudio method")
	}

	mmAddBytesReadFromAudio.mock.funcAddBytesReadFromAudio = f
	mmAddBytesReadFromAudio.mock.funcAddBytesReadFromAudioOrigin = minimock.CallerInfo(1)
	return mmAddBytesReadFromAudio.mock
}

// When sets expectation for the Metrics.AddBytesReadFromAudio which will trigger the result defined by the following
// Then helper
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) When(bytes int) *MetricsMockAddBytesReadFromAudioExpectation {
	if mmAddBytesReadFromAudio.mock.funcAddBytesReadFromAudio != nil {
		mmAddBytesReadFromAudio.mock.t.Fatalf("MetricsMock.AddBytesReadFromAudio mock is already set by Set")
	}

	expectation := &MetricsMockAddBytesReadFromAudioExpectation{
		mock:               mmAddBytesReadFromAudio.mock,
		params:             &MetricsMockAddBytesReadFromAudioParams{bytes},
		expectationOrigins: MetricsMockAddBytesReadFromAudioExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddBytesReadFromAudio.expectations = append(mmAddBytesReadFromAudio.expectations, expectation)
	return expectation
}

// Then sets up Metrics.AddBytesReadFromAudio return parameters for the expectation previously defined by the When method

func (e *MetricsMockAddBytesReadFromAudioExpectation) Then() *MetricsMock {
	return e.mock
}

// Times sets number of times Metrics.AddBytesReadFromAudio should be invoked
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) Times(n uint64) *mMetricsMockAddBytesReadFromAudio {
	if n == 0 {
		mmAddBytesReadFromAudio.mock.t.Fatalf("Times of MetricsMock.AddBytesReadFromAudio mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddBytesReadFromAudio.expectedInvocations, n)
	mmAddBytesReadFromAudio.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddBytesReadFromAudio
}

func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) invocationsDone() bool {
	if len(mmAddBytesReadFromAudio.expectations) == 0 && mmAddBytesReadFromAudio.defaultExpectation == nil && mmAddBytesReadFromAudio.mock.funcAddBytesReadFromAudio == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddBytesReadFromAudio.mock.afterAddBytesReadFromAudioCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddBytesReadFromAudio.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddBytesReadFromAudio implements Metrics
func (mmAddBytesReadFromAudio *MetricsMock) AddBytesReadFromAudio(bytes int) {
	mm_atomic.AddUint64(&mmAddBytesReadFromAudio.beforeAddBytesReadFromAudioCounter, 1)
	defer mm_atomic.AddUint64(&mmAddBytesReadFromAudio.afterAddBytesReadFromAudioCounter, 1)

	mmAddBytesReadFromAudio.t.Helper()

	if mmAddBytesReadFromAudio.inspectFuncAddBytesReadFromAudio != nil {
		mmAddBytesReadFromAudio.inspectFuncAddBytesReadFromAudio(bytes)
	}

	mm_params := MetricsMockAddBytesReadFromAudioParams{bytes}

	// Record call args
	mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.mutex.Lock()
	mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.callArgs = append(mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.callArgs, &mm_params)
	mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.mutex.Unlock()

	for _, e := range mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.defaultExpectation.Counter, 1)
		mm_want := mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.defaultExpectation.params
		mm_want_ptrs := mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.defaultExpectation.paramPtrs

		mm_got := MetricsMockAddBytesReadFromAudioParams{bytes}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.bytes != nil && !minimock.Equal(*mm_want_ptrs.bytes, mm_got.bytes) {
				mmAddBytesReadFromAudio.t.Errorf("MetricsMock.AddBytesReadFromAudio got unexpected parameter bytes, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.defaultExpectation.expectationOrigins.originBytes, *mm_want_ptrs.bytes, mm_got.bytes, minimock.Diff(*mm_want_ptrs.bytes, mm_got.bytes))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddBytesReadFromAudio.t.Errorf("MetricsMock.AddBytesReadFromAudio got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddBytesReadFromAudio.AddBytesReadFromAudioMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddBytesReadFromAudio.funcAddBytesReadFromAudio != nil {
		mmAddBytesReadFromAudio.funcAddBytesReadFromAudio(bytes)
		return
	}
	mmAddBytesReadFromAudio.t.Fatalf("Unexpected call to MetricsMock.AddBytesReadFromAudio. %v", bytes)

}

// AddBytesReadFromAudioAfterCounter returns a count of finished MetricsMock.AddBytesReadFromAudio invocations
func (mmAddBytesReadFromAudio *MetricsMock) AddBytesReadFromAudioAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddBytesReadFromAudio.afterAddBytesReadFromAudioCounter)
}

// AddBytesReadFromAudioBeforeCounter returns a count of MetricsMock.AddBytesReadFromAudio invocations
func (mmAddBytesReadFromAudio *MetricsMock) AddBytesReadFromAudioBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddBytesReadFromAudio.beforeAddBytesReadFromAudioCounter)
}

// Calls returns a list of arguments used in each call to MetricsMock.AddBytesReadFromAudio.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddBytesReadFromAudio *mMetricsMockAddBytesReadFromAudio) Calls() []*MetricsMockAddBytesReadFromAudioParams {
	mmAddBytesReadFromAudio.mutex.RLock()

	argCopy := make([]*MetricsMockAddBytesReadFromAudioParams, len(mmAddBytesReadFromAudio.callArgs))
	copy(argCopy, mmAddBytesReadFromAudio.callArgs)

	mmAddBytesReadFromAudio.mutex.RUnlock()

	return argCopy
}

// MinimockAddBytesReadFromAudioDone returns true if the count of the AddBytesReadFromAudio invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockAddBytesReadFromAudioDone() bool {
	if m.AddBytesReadFromAudioMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddBytesReadFromAudioMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddBytesReadFromAudioMock.invocationsDone()
}

// MinimockAddBytesReadFromAudioInspect logs each unmet expectation
func (m *MetricsMock) MinimockAddBytesReadFromAudioInspect() {
	for _, e := range m.AddBytesReadFromAudioMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsMock.AddBytesReadFromAudio at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddBytesReadFromAudioCounter := mm_atomic.LoadUint64(&m.afterAddBytesReadFromAudioCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddBytesReadFromAudioMock.defaultExpectation != nil && afterAddBytesReadFromAudioCounter < 1 {
		if m.AddBytesReadFromAudioMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetricsMock.AddBytesReadFromAudio at\n%s", m.AddBytesReadFromAudioMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetricsMock.AddBytesReadFromAudio at\n%s with params: %#v", m.AddBytesReadFromAudioMock.defaultExpectation.expectationOrigins.origin, *m.AddBytesReadFromAudioMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddBytesReadFromAudio != nil && afterAddBytesReadFromAudioCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.AddBytesReadFromAudio at\n%s", m.funcAddBytesReadFromAudioOrigin)
	}

	if !m.AddBytesReadFromAudioMock.invocationsDone() && afterAddBytesReadFromAudioCounter > 0 {
		m.t.Errorf("Expected %d calls to MetricsMock.AddBytesReadFromAudio at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddBytesReadFromAudioMock.expectedInvocations), m.AddBytesReadFromAudioMock.expectedInvocationsOrigin, afterAddBytesReadFromAudioCounter)
	}
}

type mMetricsMockAddBytesSentToGoogleSpeech struct {
	optional           bool
	mock               *MetricsMock
	defaultExpectation *MetricsMockAddBytesSentToGoogleSpeechExpectation
	expectations       []*MetricsMockAddBytesSentToGoogleSpeechExpectation

	callArgs []*MetricsMockAddBytesSentToGoogleSpeechParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetricsMockAddBytesSentToGoogleSpeechExpectation specifies expectation struct of the Metrics.AddBytesSentToGoogleSpeech
type MetricsMockAddBytesSentToGoogleSpeechExpectation struct {
	mock               *MetricsMock
	params             *MetricsMockAddBytesSentToGoogleSpeechParams
	paramPtrs          *MetricsMockAddBytesSentToGoogleSpeechParamPtrs
	expectationOrigins MetricsMockAddBytesSentToGoogleSpeechExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// MetricsMockAddBytesSentToGoogleSpeechParams contains parameters of the Metrics.AddBytesSentToGoogleSpeech
type MetricsMockAddBytesSentToGoogleSpeechParams struct {
	bytes int
}

// MetricsMockAddBytesSentToGoogleSpeechParamPtrs contains pointers to parameters of the Metrics.AddBytesSentToGoogleSpeech
type MetricsMockAddBytesSentToGoogleSpeechParamPtrs struct {
	bytes *int
}

// MetricsMockAddBytesSentToGoogleSpeechOrigins contains origins of expectations of the Metrics.AddBytesSentToGoogleSpeech
type MetricsMockAddBytesSentToGoogleSpeechExpectationOrigins struct {
	origin      string
	originBytes string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) Optional() *mMetricsMockAddBytesSentToGoogleSpeech {
	mmAddBytesSentToGoogleSpeech.optional = true
	return mmAddBytesSentToGoogleSpeech
}

// Expect sets up expected params for Metrics.AddBytesSentToGoogleSpeech
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) Expect(bytes int) *mMetricsMockAddBytesSentToGoogleSpeech {
	if mmAddBytesSentToGoogleSpeech.mock.funcAddBytesSentToGoogleSpeech != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddBytesSentToGoogleSpeech mock is already set by Set")
	}

	if mmAddBytesSentToGoogleSpeech.defaultExpectation == nil {
		mmAddBytesSentToGoogleSpeech.defaultExpectation = &MetricsMockAddBytesSentToGoogleSpeechExpectation{}
	}

	if mmAddBytesSentToGoogleSpeech.defaultExpectation.paramPtrs != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddBytesSentToGoogleSpeech mock is already set by ExpectParams functions")
	}

	mmAddBytesSentToGoogleSpeech.defaultExpectation.params = &MetricsMockAddBytesSentToGoogleSpeechParams{bytes}
	mmAddBytesSentToGoogleSpeech.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddBytesSentToGoogleSpeech.expectations {
		if minimock.Equal(e.params, mmAddBytesSentToGoogleSpeech.defaultExpectation.params) {
			mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddBytesSentToGoogleSpeech.defaultExpectation.params)
		}
	}

	return mmAddBytesSentToGoogleSpeech
}

// ExpectBytesParam1 sets up expected param bytes for Metrics.AddBytesSentToGoogleSpeech
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) ExpectBytesParam1(bytes int) *mMetricsMockAddBytesSentToGoogleSpeech {
	if mmAddBytesSentToGoogleSpeech.mock.funcAddBytesSentToGoogleSpeech != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddBytesSentToGoogleSpeech mock is already set by Set")
	}

	if mmAddBytesSentToGoogleSpeech.defaultExpectation == nil {
		mmAddBytesSentToGoogleSpeech.defaultExpectation = &MetricsMockAddBytesSentToGoogleSpeechExpectation{}
	}

	if mmAddBytesSentToGoogleSpeech.defaultExpectation.params != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddBytesSentToGoogleSpeech mock is already set by Expect")
	}

	if mmAddBytesSentToGoogleSpeech.defaultExpectation.paramPtrs == nil {
		mmAddBytesSentToGoogleSpeech.defaultExpectation.paramPtrs = &MetricsMockAddBytesSentToGoogleSpeechParamPtrs{}
	}
	mmAddBytesSentToGoogleSpeech.defaultExpectation.paramPtrs.bytes = &bytes
	mmAddBytesSentToGoogleSpeech.defaultExpectation.expectationOrigins.originBytes = minimock.CallerInfo(1)

	return mmAddBytesSentToGoogleSpeech
}

// Inspect accepts an inspector function that has same arguments as the Metrics.AddBytesSentToGoogleSpeech
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) Inspect(f func(bytes int)) *mMetricsMockAddBytesSentToGoogleSpeech {
	if mmAddBytesSentToGoogleSpeech.mock.inspectFuncAddBytesSentToGoogleSpeech != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("Inspect function is already set for MetricsMock.AddBytesSentToGoogleSpeech")
	}

	mmAddBytesSentToGoogleSpeech.mock.inspectFuncAddBytesSentToGoogleSpeech = f

	return mmAddBytesSentToGoogleSpeech
}

// Return sets up results that will be returned by Metrics.AddBytesSentToGoogleSpeech
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) Return() *MetricsMock {
	if mmAddBytesSentToGoogleSpeech.mock.funcAddBytesSentToGoogleSpeech != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddBytesSentToGoogleSpeech mock is already set by Set")
	}

	if mmAddBytesSentToGoogleSpeech.defaultExpectation == nil {
		mmAddBytesSentToGoogleSpeech.defaultExpectation = &MetricsMockAddBytesSentToGoogleSpeechExpectation{mock: mmAddBytesSentToGoogleSpeech.mock}
	}

	mmAddBytesSentToGoogleSpeech.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddBytesSentToGoogleSpeech.mock
}

// Set uses given function f to mock the Metrics.AddBytesSentToGoogleSpeech method
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) Set(f func(bytes int)) *MetricsMock {
	if mmAddBytesSentToGoogleSpeech.defaultExpectation != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("Default expectation is already set for the Metrics.AddBytesSentToGoogleSpeech method")
	}

	if len(mmAddBytesSentToGoogleSpeech.expectations) > 0 {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("Some expectations are already set for the Metrics.AddBytesSentToGoogleSpeech method")
	}

	mmAddBytesSentToGoogleSpeech.mock.funcAddBytesSentToGoogleSpeech = f
	mmAddBytesSentToGoogleSpeech.mock.funcAddBytesSentToGoogleSpeechOrigin = minimock.CallerInfo(1)
	return mmAddBytesSentToGoogleSpeech.mock
}

// When sets expectation for the Metrics.AddBytesSentToGoogleSpeech which will trigger the result defined by the following
// Then helper
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) When(bytes int) *MetricsMockAddBytesSentToGoogleSpeechExpectation {
	if mmAddBytesSentToGoogleSpeech.mock.funcAddBytesSentToGoogleSpeech != nil {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddBytesSentToGoogleSpeech mock is already set by Set")
	}

	expectation := &MetricsMockAddBytesSentToGoogleSpeechExpectation{
		mock:               mmAddBytesSentToGoogleSpeech.mock,
		params:             &MetricsMockAddBytesSentToGoogleSpeechParams{bytes},
		expectationOrigins: MetricsMockAddBytesSentToGoogleSpeechExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddBytesSentToGoogleSpeech.expectations = append(mmAddBytesSentToGoogleSpeech.expectations, expectation)
	return expectation
}

// Then sets up Metrics.AddBytesSentToGoogleSpeech return parameters for the expectation previously defined by the When method

func (e *MetricsMockAddBytesSentToGoogleSpeechExpectation) Then() *MetricsMock {
	return e.mock
}

// Times sets number of times Metrics.AddBytesSentToGoogleSpeech should be invoked
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) Times(n uint64) *mMetricsMockAddBytesSentToGoogleSpeech {
	if n == 0 {
		mmAddBytesSentToGoogleSpeech.mock.t.Fatalf("Times of MetricsMock.AddBytesSentToGoogleSpeech mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddBytesSentToGoogleSpeech.expectedInvocations, n)
	mmAddBytesSentToGoogleSpeech.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddBytesSentToGoogleSpeech
}

func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) invocationsDone() bool {
	if len(mmAddBytesSentToGoogleSpeech.expectations) == 0 && mmAddBytesSentToGoogleSpeech.defaultExpectation == nil && mmAddBytesSentToGoogleSpeech.mock.funcAddBytesSentToGoogleSpeech == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddBytesSentToGoogleSpeech.mock.afterAddBytesSentToGoogleSpeechCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddBytesSentToGoogleSpeech.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddBytesSentToGoogleSpeech implements Metrics
func (mmAddBytesSentToGoogleSpeech *MetricsMock) AddBytesSentToGoogleSpeech(bytes int) {
	mm_atomic.AddUint64(&mmAddBytesSentToGoogleSpeech.beforeAddBytesSentToGoogleSpeechCounter, 1)
	defer mm_atomic.AddUint64(&mmAddBytesSentToGoogleSpeech.afterAddBytesSentToGoogleSpeechCounter, 1)

	mmAddBytesSentToGoogleSpeech.t.Helper()

	if mmAddBytesSentToGoogleSpeech.inspectFuncAddBytesSentToGoogleSpeech != nil {
		mmAddBytesSentToGoogleSpeech.inspectFuncAddBytesSentToGoogleSpeech(bytes)
	}

	mm_params := MetricsMockAddBytesSentToGoogleSpeechParams{bytes}

	// Record call args
	mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.mutex.Lock()
	mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.callArgs = append(mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.callArgs, &mm_params)
	mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.mutex.Unlock()

	for _, e := range mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.defaultExpectation.Counter, 1)
		mm_want := mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.defaultExpectation.params
		mm_want_ptrs := mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.defaultExpectation.paramPtrs

		mm_got := MetricsMockAddBytesSentToGoogleSpeechParams{bytes}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.bytes != nil && !minimock.Equal(*mm_want_ptrs.bytes, mm_got.bytes) {
				mmAddBytesSentToGoogleSpeech.t.Errorf("MetricsMock.AddBytesSentToGoogleSpeech got unexpected parameter bytes, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.defaultExpectation.expectationOrigins.originBytes, *mm_want_ptrs.bytes, mm_got.bytes, minimock.Diff(*mm_want_ptrs.bytes, mm_got.bytes))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddBytesSentToGoogleSpeech.t.Errorf("MetricsMock.AddBytesSentToGoogleSpeech got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddBytesSentToGoogleSpeech.AddBytesSentToGoogleSpeechMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddBytesSentToGoogleSpeech.funcAddBytesSentToGoogleSpeech != nil {
		mmAddBytesSentToGoogleSpeech.funcAddBytesSentToGoogleSpeech(bytes)
		return
	}
	mmAddBytesSentToGoogleSpeech.t.Fatalf("Unexpected call to MetricsMock.AddBytesSentToGoogleSpeech. %v", bytes)

}

// AddBytesSentToGoogleSpeechAfterCounter returns a count of finished MetricsMock.AddBytesSentToGoogleSpeech invocations
func (mmAddBytesSentToGoogleSpeech *MetricsMock) AddBytesSentToGoogleSpeechAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddBytesSentToGoogleSpeech.afterAddBytesSentToGoogleSpeechCounter)
}

// AddBytesSentToGoogleSpeechBeforeCounter returns a count of MetricsMock.AddBytesSentToGoogleSpeech invocations
func (mmAddBytesSentToGoogleSpeech *MetricsMock) AddBytesSentToGoogleSpeechBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddBytesSentToGoogleSpeech.beforeAddBytesSentToGoogleSpeechCounter)
}

// Calls returns a list of arguments used in each call to MetricsMock.AddBytesSentToGoogleSpeech.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddBytesSentToGoogleSpeech *mMetricsMockAddBytesSentToGoogleSpeech) Calls() []*MetricsMockAddBytesSentToGoogleSpeechParams {
	mmAddBytesSentToGoogleSpeech.mutex.RLock()

	argCopy := make([]*MetricsMockAddBytesSentToGoogleSpeechParams, len(mmAddBytesSentToGoogleSpeech.callArgs))
	copy(argCopy, mmAddBytesSentToGoogleSpeech.callArgs)

	mmAddBytesSentToGoogleSpeech.mutex.RUnlock()

	return argCopy
}

// MinimockAddBytesSentToGoogleSpeechDone returns true if the count of the AddBytesSentToGoogleSpeech invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockAddBytesSentToGoogleSpeechDone() bool {
	if m.AddBytesSentToGoogleSpeechMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddBytesSentToGoogleSpeechMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddBytesSentToGoogleSpeechMock.invocationsDone()
}

// MinimockAddBytesSentToGoogleSpeechInspect logs each unmet expectation
func (m *MetricsMock) MinimockAddBytesSentToGoogleSpeechInspect() {
	for _, e := range m.AddBytesSentToGoogleSpeechMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsMock.AddBytesSentToGoogleSpeech at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddBytesSentToGoogleSpeechCounter := mm_atomic.LoadUint64(&m.afterAddBytesSentToGoogleSpeechCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddBytesSentToGoogleSpeechMock.defaultExpectation != nil && afterAddBytesSentToGoogleSpeechCounter < 1 {
		if m.AddBytesSentToGoogleSpeechMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetricsMock.AddBytesSentToGoogleSpeech at\n%s", m.AddBytesSentToGoogleSpeechMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetricsMock.AddBytesSentToGoogleSpeech at\n%s with params: %#v", m.AddBytesSentToGoogleSpeechMock.defaultExpectation.expectationOrigins.origin, *m.AddBytesSentToGoogleSpeechMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddBytesSentToGoogleSpeech != nil && afterAddBytesSentToGoogleSpeechCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.AddBytesSentToGoogleSpeech at\n%s", m.funcAddBytesSentToGoogleSpeechOrigin)
	}

	if !m.AddBytesSentToGoogleSpeechMock.invocationsDone() && afterAddBytesSentToGoogleSpeechCounter > 0 {
		m.t.Errorf("Expected %d calls to MetricsMock.AddBytesSentToGoogleSpeech at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddBytesSentToGoogleSpeechMock.expectedInvocations), m.AddBytesSentToGoogleSpeechMock.expectedInvocationsOrigin, afterAddBytesSentToGoogleSpeechCounter)
	}
}

type mMetricsMockAddBytesWrittenOnDisk struct {
	optional           bool
	mock               *MetricsMock
	defaultExpectation *MetricsMockAddBytesWrittenOnDiskExpectation
	expectations       []*MetricsMockAddBytesWrittenOnDiskExpectation

	callArgs []*MetricsMockAddBytesWrittenOnDiskParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetricsMockAddBytesWrittenOnDiskExpectation specifies expectation struct of the Metrics.AddBytesWrittenOnDisk
type MetricsMockAddBytesWrittenOnDiskExpectation struct {
	mock               *MetricsMock
	params             *MetricsMockAddBytesWrittenOnDiskParams
	paramPtrs          *MetricsMockAddBytesWrittenOnDiskParamPtrs
	expectationOrigins MetricsMockAddBytesWrittenOnDiskExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// MetricsMockAddBytesWrittenOnDiskParams contains parameters of the Metrics.AddBytesWrittenOnDisk
type MetricsMockAddBytesWrittenOnDiskParams struct {
	bytes int
}

// MetricsMockAddBytesWrittenOnDiskParamPtrs contains pointers to parameters of the Metrics.AddBytesWrittenOnDisk
type MetricsMockAddBytesWrittenOnDiskParamPtrs struct {
	bytes *int
}

// MetricsMockAddBytesWrittenOnDiskOrigins contains origins of expectations of the Metrics.AddBytesWrittenOnDisk
type MetricsMockAddBytesWrittenOnDiskExpectationOrigins struct {
	origin      string
	originBytes string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) Optional() *mMetricsMockAddBytesWrittenOnDisk {
	mmAddBytesWrittenOnDisk.optional = true
	return mmAddBytesWrittenOnDisk
}

// Expect sets up expected params for Metrics.AddBytesWrittenOnDisk
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) Expect(bytes int) *mMetricsMockAddBytesWrittenOnDisk {
	if mmAddBytesWrittenOnDisk.mock.funcAddBytesWrittenOnDisk != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("MetricsMock.AddBytesWrittenOnDisk mock is already set by Set")
	}

	if mmAddBytesWrittenOnDisk.defaultExpectation == nil {
		mmAddBytesWrittenOnDisk.defaultExpectation = &MetricsMockAddBytesWrittenOnDiskExpectation{}
	}

	if mmAddBytesWrittenOnDisk.defaultExpectation.paramPtrs != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("MetricsMock.AddBytesWrittenOnDisk mock is already set by ExpectParams functions")
	}

	mmAddBytesWrittenOnDisk.defaultExpectation.params = &MetricsMockAddBytesWrittenOnDiskParams{bytes}
	mmAddBytesWrittenOnDisk.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddBytesWrittenOnDisk.expectations {
		if minimock.Equal(e.params, mmAddBytesWrittenOnDisk.defaultExpectation.params) {
			mmAddBytesWrittenOnDisk.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddBytesWrittenOnDisk.defaultExpectation.params)
		}
	}

	return mmAddBytesWrittenOnDisk
}

// ExpectBytesParam1 sets up expected param bytes for Metrics.AddBytesWrittenOnDisk
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) ExpectBytesParam1(bytes int) *mMetricsMockAddBytesWrittenOnDisk {
	if mmAddBytesWrittenOnDisk.mock.funcAddBytesWrittenOnDisk != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("MetricsMock.AddBytesWrittenOnDisk mock is already set by Set")
	}

	if mmAddBytesWrittenOnDisk.defaultExpectation == nil {
		mmAddBytesWrittenOnDisk.defaultExpectation = &MetricsMockAddBytesWrittenOnDiskExpectation{}
	}

	if mmAddBytesWrittenOnDisk.defaultExpectation.params != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("MetricsMock.AddBytesWrittenOnDisk mock is already set by Expect")
	}

	if mmAddBytesWrittenOnDisk.defaultExpectation.paramPtrs == nil {
		mmAddBytesWrittenOnDisk.defaultExpectation.paramPtrs = &MetricsMockAddBytesWrittenOnDiskParamPtrs{}
	}
	mmAddBytesWrittenOnDisk.defaultExpectation.paramPtrs.bytes = &bytes
	mmAddBytesWrittenOnDisk.defaultExpectation.expectationOrigins.originBytes = minimock.CallerInfo(1)

	return mmAddBytesWrittenOnDisk
}

// Inspect accepts an inspector function that has same arguments as the Metrics.AddBytesWrittenOnDisk
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) Inspect(f func(bytes int)) *mMetricsMockAddBytesWrittenOnDisk {
	if mmAddBytesWrittenOnDisk.mock.inspectFuncAddBytesWrittenOnDisk != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("Inspect function is already set for MetricsMock.AddBytesWrittenOnDisk")
	}

	mmAddBytesWrittenOnDisk.mock.inspectFuncAddBytesWrittenOnDisk = f

	return mmAddBytesWrittenOnDisk
}

// Return sets up results that will be returned by Metrics.AddBytesWrittenOnDisk
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) Return() *MetricsMock {
	if mmAddBytesWrittenOnDisk.mock.funcAddBytesWrittenOnDisk != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("MetricsMock.AddBytesWrittenOnDisk mock is already set by Set")
	}

	if mmAddBytesWrittenOnDisk.defaultExpectation == nil {
		mmAddBytesWrittenOnDisk.defaultExpectation = &MetricsMockAddBytesWrittenOnDiskExpectation{mock: mmAddBytesWrittenOnDisk.mock}
	}

	mmAddBytesWrittenOnDisk.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddBytesWrittenOnDisk.mock
}

// Set uses given function f to mock the Metrics.AddBytesWrittenOnDisk method
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) Set(f func(bytes int)) *MetricsMock {
	if mmAddBytesWrittenOnDisk.defaultExpectation != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("Default expectation is already set for the Metrics.AddBytesWrittenOnDisk method")
	}

	if len(mmAddBytesWrittenOnDisk.expectations) > 0 {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("Some expectations are already set for the Metrics.AddBytesWrittenOnDisk method")
	}

	mmAddBytesWrittenOnDisk.mock.funcAddBytesWrittenOnDisk = f
	mmAddBytesWrittenOnDisk.mock.funcAddBytesWrittenOnDiskOrigin = minimock.CallerInfo(1)
	return mmAddBytesWrittenOnDisk.mock
}

// When sets expectation for the Metrics.AddBytesWrittenOnDisk which will trigger the result defined by the following
// Then helper
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) When(bytes int) *MetricsMockAddBytesWrittenOnDiskExpectation {
	if mmAddBytesWrittenOnDisk.mock.funcAddBytesWrittenOnDisk != nil {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("MetricsMock.AddBytesWrittenOnDisk mock is already set by Set")
	}

	expectation := &MetricsMockAddBytesWrittenOnDiskExpectation{
		mock:               mmAddBytesWrittenOnDisk.mock,
		params:             &MetricsMockAddBytesWrittenOnDiskParams{bytes},
		expectationOrigins: MetricsMockAddBytesWrittenOnDiskExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddBytesWrittenOnDisk.expectations = append(mmAddBytesWrittenOnDisk.expectations, expectation)
	return expectation
}

// Then sets up Metrics.AddBytesWrittenOnDisk return parameters for the expectation previously defined by the When method

func (e *MetricsMockAddBytesWrittenOnDiskExpectation) Then() *MetricsMock {
	return e.mock
}

// Times sets number of times Metrics.AddBytesWrittenOnDisk should be invoked
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) Times(n uint64) *mMetricsMockAddBytesWrittenOnDisk {
	if n == 0 {
		mmAddBytesWrittenOnDisk.mock.t.Fatalf("Times of MetricsMock.AddBytesWrittenOnDisk mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddBytesWrittenOnDisk.expectedInvocations, n)
	mmAddBytesWrittenOnDisk.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddBytesWrittenOnDisk
}

func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) invocationsDone() bool {
	if len(mmAddBytesWrittenOnDisk.expectations) == 0 && mmAddBytesWrittenOnDisk.defaultExpectation == nil && mmAddBytesWrittenOnDisk.mock.funcAddBytesWrittenOnDisk == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddBytesWrittenOnDisk.mock.afterAddBytesWrittenOnDiskCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddBytesWrittenOnDisk.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddBytesWrittenOnDisk implements Metrics
func (mmAddBytesWrittenOnDisk *MetricsMock) AddBytesWrittenOnDisk(bytes int) {
	mm_atomic.AddUint64(&mmAddBytesWrittenOnDisk.beforeAddBytesWrittenOnDiskCounter, 1)
	defer mm_atomic.AddUint64(&mmAddBytesWrittenOnDisk.afterAddBytesWrittenOnDiskCounter, 1)

	mmAddBytesWrittenOnDisk.t.Helper()

	if mmAddBytesWrittenOnDisk.inspectFuncAddBytesWrittenOnDisk != nil {
		mmAddBytesWrittenOnDisk.inspectFuncAddBytesWrittenOnDisk(bytes)
	}

	mm_params := MetricsMockAddBytesWrittenOnDiskParams{bytes}

	// Record call args
	mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.mutex.Lock()
	mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.callArgs = append(mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.callArgs, &mm_params)
	mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.mutex.Unlock()

	for _, e := range mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.defaultExpectation.Counter, 1)
		mm_want := mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.defaultExpectation.params
		mm_want_ptrs := mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.defaultExpectation.paramPtrs

		mm_got := MetricsMockAddBytesWrittenOnDiskParams{bytes}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.bytes != nil && !minimock.Equal(*mm_want_ptrs.bytes, mm_got.bytes) {
				mmAddBytesWrittenOnDisk.t.Errorf("MetricsMock.AddBytesWrittenOnDisk got unexpected parameter bytes, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.defaultExpectation.expectationOrigins.originBytes, *mm_want_ptrs.bytes, mm_got.bytes, minimock.Diff(*mm_want_ptrs.bytes, mm_got.bytes))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddBytesWrittenOnDisk.t.Errorf("MetricsMock.AddBytesWrittenOnDisk got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddBytesWrittenOnDisk.AddBytesWrittenOnDiskMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddBytesWrittenOnDisk.funcAddBytesWrittenOnDisk != nil {
		mmAddBytesWrittenOnDisk.funcAddBytesWrittenOnDisk(bytes)
		return
	}
	mmAddBytesWrittenOnDisk.t.Fatalf("Unexpected call to MetricsMock.AddBytesWrittenOnDisk. %v", bytes)

}

// AddBytesWrittenOnDiskAfterCounter returns a count of finished MetricsMock.AddBytesWrittenOnDisk invocations
func (mmAddBytesWrittenOnDisk *MetricsMock) AddBytesWrittenOnDiskAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddBytesWrittenOnDisk.afterAddBytesWrittenOnDiskCounter)
}

// AddBytesWrittenOnDiskBeforeCounter returns a count of MetricsMock.AddBytesWrittenOnDisk invocations
func (mmAddBytesWrittenOnDisk *MetricsMock) AddBytesWrittenOnDiskBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddBytesWrittenOnDisk.beforeAddBytesWrittenOnDiskCounter)
}

// Calls returns a list of arguments used in each call to MetricsMock.AddBytesWrittenOnDisk.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddBytesWrittenOnDisk *mMetricsMockAddBytesWrittenOnDisk) Calls() []*MetricsMockAddBytesWrittenOnDiskParams {
	mmAddBytesWrittenOnDisk.mutex.RLock()

	argCopy := make([]*MetricsMockAddBytesWrittenOnDiskParams, len(mmAddBytesWrittenOnDisk.callArgs))
	copy(argCopy, mmAddBytesWrittenOnDisk.callArgs)

	mmAddBytesWrittenOnDisk.mutex.RUnlock()

	return argCopy
}

// MinimockAddBytesWrittenOnDiskDone returns true if the count of the AddBytesWrittenOnDisk invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockAddBytesWrittenOnDiskDone() bool {
	if m.AddBytesWrittenOnDiskMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddBytesWrittenOnDiskMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddBytesWrittenOnDiskMock.invocationsDone()
}

// MinimockAddBytesWrittenOnDiskInspect logs each unmet expectation
func (m *MetricsMock) MinimockAddBytesWrittenOnDiskInspect() {
	for _, e := range m.AddBytesWrittenOnDiskMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsMock.AddBytesWrittenOnDisk at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddBytesWrittenOnDiskCounter := mm_atomic.LoadUint64(&m.afterAddBytesWrittenOnDiskCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddBytesWrittenOnDiskMock.defaultExpectation != nil && afterAddBytesWrittenOnDiskCounter < 1 {
		if m.AddBytesWrittenOnDiskMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetricsMock.AddBytesWrittenOnDisk at\n%s", m.AddBytesWrittenOnDiskMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetricsMock.AddBytesWrittenOnDisk at\n%s with params: %#v", m.AddBytesWrittenOnDiskMock.defaultExpectation.expectationOrigins.origin, *m.AddBytesWrittenOnDiskMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddBytesWrittenOnDisk != nil && afterAddBytesWrittenOnDiskCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.AddBytesWrittenOnDisk at\n%s", m.funcAddBytesWrittenOnDiskOrigin)
	}

	if !m.AddBytesWrittenOnDiskMock.invocationsDone() && afterAddBytesWrittenOnDiskCounter > 0 {
		m.t.Errorf("Expected %d calls to MetricsMock.AddBytesWrittenOnDisk at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddBytesWrittenOnDiskMock.expectedInvocations), m.AddBytesWrittenOnDiskMock.expectedInvocationsOrigin, afterAddBytesWrittenOnDiskCounter)
	}
}

type mMetricsMockAddConnectionsToGoogleSpeech struct {
	optional           bool
	mock               *MetricsMock
	defaultExpectation *MetricsMockAddConnectionsToGoogleSpeechExpectation
	expectations       []*MetricsMockAddConnectionsToGoogleSpeechExpectation

	callArgs []*MetricsMockAddConnectionsToGoogleSpeechParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetricsMockAddConnectionsToGoogleSpeechExpectation specifies expectation struct of the Metrics.AddConnectionsToGoogleSpeech
type MetricsMockAddConnectionsToGoogleSpeechExpectation struct {
	mock               *MetricsMock
	params             *MetricsMockAddConnectionsToGoogleSpeechParams
	paramPtrs          *MetricsMockAddConnectionsToGoogleSpeechParamPtrs
	expectationOrigins MetricsMockAddConnectionsToGoogleSpeechExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// MetricsMockAddConnectionsToGoogleSpeechParams contains parameters of the Metrics.AddConnectionsToGoogleSpeech
type MetricsMockAddConnectionsToGoogleSpeechParams struct {
	n int
}

// MetricsMockAddConnectionsToGoogleSpeechParamPtrs contains pointers to parameters of the Metrics.AddConnectionsToGoogleSpeech
type MetricsMockAddConnectionsToGoogleSpeechParamPtrs struct {
	n *int
}

// MetricsMockAddConnectionsToGoogleSpeechOrigins contains origins of expectations of the Metrics.AddConnectionsToGoogleSpeech
type MetricsMockAddConnectionsToGoogleSpeechExpectationOrigins struct {
	origin  string
	originN string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) Optional() *mMetricsMockAddConnectionsToGoogleSpeech {
	mmAddConnectionsToGoogleSpeech.optional = true
	return mmAddConnectionsToGoogleSpeech
}

// Expect sets up expected params for Metrics.AddConnectionsToGoogleSpeech
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) Expect(n int) *mMetricsMockAddConnectionsToGoogleSpeech {
	if mmAddConnectionsToGoogleSpeech.mock.funcAddConnectionsToGoogleSpeech != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddConnectionsToGoogleSpeech mock is already set by Set")
	}

	if mmAddConnectionsToGoogleSpeech.defaultExpectation == nil {
		mmAddConnectionsToGoogleSpeech.defaultExpectation = &MetricsMockAddConnectionsToGoogleSpeechExpectation{}
	}

	if mmAddConnectionsToGoogleSpeech.defaultExpectation.paramPtrs != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddConnectionsToGoogleSpeech mock is already set by ExpectParams functions")
	}

	mmAddConnectionsToGoogleSpeech.defaultExpectation.params = &MetricsMockAddConnectionsToGoogleSpeechParams{n}
	mmAddConnectionsToGoogleSpeech.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddConnectionsToGoogleSpeech.expectations {
		if minimock.Equal(e.params, mmAddConnectionsToGoogleSpeech.defaultExpectation.params) {
			mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddConnectionsToGoogleSpeech.defaultExpectation.params)
		}
	}

	return mmAddConnectionsToGoogleSpeech
}

// ExpectNParam1 sets up expected param n for Metrics.AddConnectionsToGoogleSpeech
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) ExpectNParam1(n int) *mMetricsMockAddConnectionsToGoogleSpeech {
	if mmAddConnectionsToGoogleSpeech.mock.funcAddConnectionsToGoogleSpeech != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddConnectionsToGoogleSpeech mock is already set by Set")
	}

	if mmAddConnectionsToGoogleSpeech.defaultExpectation == nil {
		mmAddConnectionsToGoogleSpeech.defaultExpectation = &MetricsMockAddConnectionsToGoogleSpeechExpectation{}
	}

	if mmAddConnectionsToGoogleSpeech.defaultExpectation.params != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddConnectionsToGoogleSpeech mock is already set by Expect")
	}

	if mmAddConnectionsToGoogleSpeech.defaultExpectation.paramPtrs == nil {
		mmAddConnectionsToGoogleSpeech.defaultExpectation.paramPtrs = &MetricsMockAddConnectionsToGoogleSpeechParamPtrs{}
	}
	mmAddConnectionsToGoogleSpeech.defaultExpectation.paramPtrs.n = &n
	mmAddConnectionsToGoogleSpeech.defaultExpectation.expectationOrigins.originN = minimock.CallerInfo(1)

	return mmAddConnectionsToGoogleSpeech
}

// Inspect accepts an inspector function that has same arguments as the Metrics.AddConnectionsToGoogleSpeech
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) Inspect(f func(n int)) *mMetricsMockAddConnectionsToGoogleSpeech {
	if mmAddConnectionsToGoogleSpeech.mock.inspectFuncAddConnectionsToGoogleSpeech != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("Inspect function is already set for MetricsMock.AddConnectionsToGoogleSpeech")
	}

	mmAddConnectionsToGoogleSpeech.mock.inspectFuncAddConnectionsToGoogleSpeech = f

	return mmAddConnectionsToGoogleSpeech
}

// Return sets up results that will be returned by Metrics.AddConnectionsToGoogleSpeech
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) Return() *MetricsMock {
	if mmAddConnectionsToGoogleSpeech.mock.funcAddConnectionsToGoogleSpeech != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddConnectionsToGoogleSpeech mock is already set by Set")
	}

	if mmAddConnectionsToGoogleSpeech.defaultExpectation == nil {
		mmAddConnectionsToGoogleSpeech.defaultExpectation = &MetricsMockAddConnectionsToGoogleSpeechExpectation{mock: mmAddConnectionsToGoogleSpeech.mock}
	}

	mmAddConnectionsToGoogleSpeech.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddConnectionsToGoogleSpeech.mock
}

// Set uses given function f to mock the Metrics.AddConnectionsToGoogleSpeech method
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) Set(f func(n int)) *MetricsMock {
	if mmAddConnectionsToGoogleSpeech.defaultExpectation != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("Default expectation is already set for the Metrics.AddConnectionsToGoogleSpeech method")
	}

	if len(mmAddConnectionsToGoogleSpeech.expectations) > 0 {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("Some expectations are already set for the Metrics.AddConnectionsToGoogleSpeech method")
	}

	mmAddConnectionsToGoogleSpeech.mock.funcAddConnectionsToGoogleSpeech = f
	mmAddConnectionsToGoogleSpeech.mock.funcAddConnectionsToGoogleSpeechOrigin = minimock.CallerInfo(1)
	return mmAddConnectionsToGoogleSpeech.mock
}

// When sets expectation for the Metrics.AddConnectionsToGoogleSpeech which will trigger the result defined by the following
// Then helper
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) When(n int) *MetricsMockAddConnectionsToGoogleSpeechExpectation {
	if mmAddConnectionsToGoogleSpeech.mock.funcAddConnectionsToGoogleSpeech != nil {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddConnectionsToGoogleSpeech mock is already set by Set")
	}

	expectation := &MetricsMockAddConnectionsToGoogleSpeechExpectation{
		mock:               mmAddConnectionsToGoogleSpeech.mock,
		params:             &MetricsMockAddConnectionsToGoogleSpeechParams{n},
		expectationOrigins: MetricsMockAddConnectionsToGoogleSpeechExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddConnectionsToGoogleSpeech.expectations = append(mmAddConnectionsToGoogleSpeech.expectations, expectation)
	return expectation
}

// Then sets up Metrics.AddConnectionsToGoogleSpeech return parameters for the expectation previously defined by the When method

func (e *MetricsMockAddConnectionsToGoogleSpeechExpectation) Then() *MetricsMock {
	return e.mock
}

// Times sets number of times Metrics.AddConnectionsToGoogleSpeech should be invoked
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) Times(n uint64) *mMetricsMockAddConnectionsToGoogleSpeech {
	if n == 0 {
		mmAddConnectionsToGoogleSpeech.mock.t.Fatalf("Times of MetricsMock.AddConnectionsToGoogleSpeech mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddConnectionsToGoogleSpeech.expectedInvocations, n)
	mmAddConnectionsToGoogleSpeech.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddConnectionsToGoogleSpeech
}

func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) invocationsDone() bool {
	if len(mmAddConnectionsToGoogleSpeech.expectations) == 0 && mmAddConnectionsToGoogleSpeech.defaultExpectation == nil && mmAddConnectionsToGoogleSpeech.mock.funcAddConnectionsToGoogleSpeech == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddConnectionsToGoogleSpeech.mock.afterAddConnectionsToGoogleSpeechCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddConnectionsToGoogleSpeech.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddConnectionsToGoogleSpeech implements Metrics
func (mmAddConnectionsToGoogleSpeech *MetricsMock) AddConnectionsToGoogleSpeech(n int) {
	mm_atomic.AddUint64(&mmAddConnectionsToGoogleSpeech.beforeAddConnectionsToGoogleSpeechCounter, 1)
	defer mm_atomic.AddUint64(&mmAddConnectionsToGoogleSpeech.afterAddConnectionsToGoogleSpeechCounter, 1)

	mmAddConnectionsToGoogleSpeech.t.Helper()

	if mmAddConnectionsToGoogleSpeech.inspectFuncAddConnectionsToGoogleSpeech != nil {
		mmAddConnectionsToGoogleSpeech.inspectFuncAddConnectionsToGoogleSpeech(n)
	}

	mm_params := MetricsMockAddConnectionsToGoogleSpeechParams{n}

	// Record call args
	mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.mutex.Lock()
	mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.callArgs = append(mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.callArgs, &mm_params)
	mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.mutex.Unlock()

	for _, e := range mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.defaultExpectation.Counter, 1)
		mm_want := mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.defaultExpectation.params
		mm_want_ptrs := mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.defaultExpectation.paramPtrs

		mm_got := MetricsMockAddConnectionsToGoogleSpeechParams{n}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.n != nil && !minimock.Equal(*mm_want_ptrs.n, mm_got.n) {
				mmAddConnectionsToGoogleSpeech.t.Errorf("MetricsMock.AddConnectionsToGoogleSpeech got unexpected parameter n, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.defaultExpectation.expectationOrigins.originN, *mm_want_ptrs.n, mm_got.n, minimock.Diff(*mm_want_ptrs.n, mm_got.n))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddConnectionsToGoogleSpeech.t.Errorf("MetricsMock.AddConnectionsToGoogleSpeech got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddConnectionsToGoogleSpeech.AddConnectionsToGoogleSpeechMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddConnectionsToGoogleSpeech.funcAddConnectionsToGoogleSpeech != nil {
		mmAddConnectionsToGoogleSpeech.funcAddConnectionsToGoogleSpeech(n)
		return
	}
	mmAddConnectionsToGoogleSpeech.t.Fatalf("Unexpected call to MetricsMock.AddConnectionsToGoogleSpeech. %v", n)

}

// AddConnectionsToGoogleSpeechAfterCounter returns a count of finished MetricsMock.AddConnectionsToGoogleSpeech invocations
func (mmAddConnectionsToGoogleSpeech *MetricsMock) AddConnectionsToGoogleSpeechAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddConnectionsToGoogleSpeech.afterAddConnectionsToGoogleSpeechCounter)
}

// AddConnectionsToGoogleSpeechBeforeCounter returns a count of MetricsMock.AddConnectionsToGoogleSpeech invocations
func (mmAddConnectionsToGoogleSpeech *MetricsMock) AddConnectionsToGoogleSpeechBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddConnectionsToGoogleSpeech.beforeAddConnectionsToGoogleSpeechCounter)
}

// Calls returns a list of arguments used in each call to MetricsMock.AddConnectionsToGoogleSpeech.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddConnectionsToGoogleSpeech *mMetricsMockAddConnectionsToGoogleSpeech) Calls() []*MetricsMockAddConnectionsToGoogleSpeechParams {
	mmAddConnectionsToGoogleSpeech.mutex.RLock()

	argCopy := make([]*MetricsMockAddConnectionsToGoogleSpeechParams, len(mmAddConnectionsToGoogleSpeech.callArgs))
	copy(argCopy, mmAddConnectionsToGoogleSpeech.callArgs)

	mmAddConnectionsToGoogleSpeech.mutex.RUnlock()

	return argCopy
}

// MinimockAddConnectionsToGoogleSpeechDone returns true if the count of the AddConnectionsToGoogleSpeech invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockAddConnectionsToGoogleSpeechDone() bool {
	if m.AddConnectionsToGoogleSpeechMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddConnectionsToGoogleSpeechMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddConnectionsToGoogleSpeechMock.invocationsDone()
}

// MinimockAddConnectionsToGoogleSpeechInspect logs each unmet expectation
func (m *MetricsMock) MinimockAddConnectionsToGoogleSpeechInspect() {
	for _, e := range m.AddConnectionsToGoogleSpeechMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsMock.AddConnectionsToGoogleSpeech at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddConnectionsToGoogleSpeechCounter := mm_atomic.LoadUint64(&m.afterAddConnectionsToGoogleSpeechCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddConnectionsToGoogleSpeechMock.defaultExpectation != nil && afterAddConnectionsToGoogleSpeechCounter < 1 {
		if m.AddConnectionsToGoogleSpeechMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetricsMock.AddConnectionsToGoogleSpeech at\n%s", m.AddConnectionsToGoogleSpeechMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetricsMock.AddConnectionsToGoogleSpeech at\n%s with params: %#v", m.AddConnectionsToGoogleSpeechMock.defaultExpectation.expectationOrigins.origin, *m.AddConnectionsToGoogleSpeechMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddConnectionsToGoogleSpeech != nil && afterAddConnectionsToGoogleSpeechCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.AddConnectionsToGoogleSpeech at\n%s", m.funcAddConnectionsToGoogleSpeechOrigin)
	}

	if !m.AddConnectionsToGoogleSpeechMock.invocationsDone() && afterAddConnectionsToGoogleSpeechCounter > 0 {
		m.t.Errorf("Expected %d calls to MetricsMock.AddConnectionsToGoogleSpeech at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddConnectionsToGoogleSpeechMock.expectedInvocations), m.AddConnectionsToGoogleSpeechMock.expectedInvocationsOrigin, afterAddConnectionsToGoogleSpeechCounter)
	}
}

type mMetricsMockAddMillisecondsSentToGoogleSpeech struct {
	optional           bool
	mock               *MetricsMock
	defaultExpectation *MetricsMockAddMillisecondsSentToGoogleSpeechExpectation
	expectations       []*MetricsMockAddMillisecondsSentToGoogleSpeechExpectation

	callArgs []*MetricsMockAddMillisecondsSentToGoogleSpeechParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetricsMockAddMillisecondsSentToGoogleSpeechExpectation specifies expectation struct of the Metrics.AddMillisecondsSentToGoogleSpeech
type MetricsMockAddMillisecondsSentToGoogleSpeechExpectation struct {
	mock               *MetricsMock
	params             *MetricsMockAddMillisecondsSentToGoogleSpeechParams
	paramPtrs          *MetricsMockAddMillisecondsSentToGoogleSpeechParamPtrs
	expectationOrigins MetricsMockAddMillisecondsSentToGoogleSpeechExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// MetricsMockAddMillisecondsSentToGoogleSpeechParams contains parameters of the Metrics.AddMillisecondsSentToGoogleSpeech
type MetricsMockAddMillisecondsSentToGoogleSpeechParams struct {
	ms int
}

// MetricsMockAddMillisecondsSentToGoogleSpeechParamPtrs contains pointers to parameters of the Metrics.AddMillisecondsSentToGoogleSpeech
type MetricsMockAddMillisecondsSentToGoogleSpeechParamPtrs struct {
	ms *int
}

// MetricsMockAddMillisecondsSentToGoogleSpeechOrigins contains origins of expectations of the Metrics.AddMillisecondsSentToGoogleSpeech
type MetricsMockAddMillisecondsSentToGoogleSpeechExpectationOrigins struct {
	origin   string
	originMs string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) Optional() *mMetricsMockAddMillisecondsSentToGoogleSpeech {
	mmAddMillisecondsSentToGoogleSpeech.optional = true
	return mmAddMillisecondsSentToGoogleSpeech
}

// Expect sets up expected params for Metrics.AddMillisecondsSentToGoogleSpeech
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) Expect(ms int) *mMetricsMockAddMillisecondsSentToGoogleSpeech {
	if mmAddMillisecondsSentToGoogleSpeech.mock.funcAddMillisecondsSentToGoogleSpeech != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddMillisecondsSentToGoogleSpeech mock is already set by Set")
	}

	if mmAddMillisecondsSentToGoogleSpeech.defaultExpectation == nil {
		mmAddMillisecondsSentToGoogleSpeech.defaultExpectation = &MetricsMockAddMillisecondsSentToGoogleSpeechExpectation{}
	}

	if mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.paramPtrs != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddMillisecondsSentToGoogleSpeech mock is already set by ExpectParams functions")
	}

	mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.params = &MetricsMockAddMillisecondsSentToGoogleSpeechParams{ms}
	mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddMillisecondsSentToGoogleSpeech.expectations {
		if minimock.Equal(e.params, mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.params) {
			mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.params)
		}
	}

	return mmAddMillisecondsSentToGoogleSpeech
}

// ExpectMsParam1 sets up expected param ms for Metrics.AddMillisecondsSentToGoogleSpeech
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) ExpectMsParam1(ms int) *mMetricsMockAddMillisecondsSentToGoogleSpeech {
	if mmAddMillisecondsSentToGoogleSpeech.mock.funcAddMillisecondsSentToGoogleSpeech != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddMillisecondsSentToGoogleSpeech mock is already set by Set")
	}

	if mmAddMillisecondsSentToGoogleSpeech.defaultExpectation == nil {
		mmAddMillisecondsSentToGoogleSpeech.defaultExpectation = &MetricsMockAddMillisecondsSentToGoogleSpeechExpectation{}
	}

	if mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.params != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddMillisecondsSentToGoogleSpeech mock is already set by Expect")
	}

	if mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.paramPtrs == nil {
		mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.paramPtrs = &MetricsMockAddMillisecondsSentToGoogleSpeechParamPtrs{}
	}
	mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.paramPtrs.ms = &ms
	mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.expectationOrigins.originMs = minimock.CallerInfo(1)

	return mmAddMillisecondsSentToGoogleSpeech
}

// Inspect accepts an inspector function that has same arguments as the Metrics.AddMillisecondsSentToGoogleSpeech
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) Inspect(f func(ms int)) *mMetricsMockAddMillisecondsSentToGoogleSpeech {
	if mmAddMillisecondsSentToGoogleSpeech.mock.inspectFuncAddMillisecondsSentToGoogleSpeech != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("Inspect function is already set for MetricsMock.AddMillisecondsSentToGoogleSpeech")
	}

	mmAddMillisecondsSentToGoogleSpeech.mock.inspectFuncAddMillisecondsSentToGoogleSpeech = f

	return mmAddMillisecondsSentToGoogleSpeech
}

// Return sets up results that will be returned by Metrics.AddMillisecondsSentToGoogleSpeech
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) Return() *MetricsMock {
	if mmAddMillisecondsSentToGoogleSpeech.mock.funcAddMillisecondsSentToGoogleSpeech != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddMillisecondsSentToGoogleSpeech mock is already set by Set")
	}

	if mmAddMillisecondsSentToGoogleSpeech.defaultExpectation == nil {
		mmAddMillisecondsSentToGoogleSpeech.defaultExpectation = &MetricsMockAddMillisecondsSentToGoogleSpeechExpectation{mock: mmAddMillisecondsSentToGoogleSpeech.mock}
	}

	mmAddMillisecondsSentToGoogleSpeech.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddMillisecondsSentToGoogleSpeech.mock
}

// Set uses given function f to mock the Metrics.AddMillisecondsSentToGoogleSpeech method
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) Set(f func(ms int)) *MetricsMock {
	if mmAddMillisecondsSentToGoogleSpeech.defaultExpectation != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("Default expectation is already set for the Metrics.AddMillisecondsSentToGoogleSpeech method")
	}

	if len(mmAddMillisecondsSentToGoogleSpeech.expectations) > 0 {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("Some expectations are already set for the Metrics.AddMillisecondsSentToGoogleSpeech method")
	}

	mmAddMillisecondsSentToGoogleSpeech.mock.funcAddMillisecondsSentToGoogleSpeech = f
	mmAddMillisecondsSentToGoogleSpeech.mock.funcAddMillisecondsSentToGoogleSpeechOrigin = minimock.CallerInfo(1)
	return mmAddMillisecondsSentToGoogleSpeech.mock
}

// When sets expectation for the Metrics.AddMillisecondsSentToGoogleSpeech which will trigger the result defined by the following
// Then helper
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) When(ms int) *MetricsMockAddMillisecondsSentToGoogleSpeechExpectation {
	if mmAddMillisecondsSentToGoogleSpeech.mock.funcAddMillisecondsSentToGoogleSpeech != nil {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("MetricsMock.AddMillisecondsSentToGoogleSpeech mock is already set by Set")
	}

	expectation := &MetricsMockAddMillisecondsSentToGoogleSpeechExpectation{
		mock:               mmAddMillisecondsSentToGoogleSpeech.mock,
		params:             &MetricsMockAddMillisecondsSentToGoogleSpeechParams{ms},
		expectationOrigins: MetricsMockAddMillisecondsSentToGoogleSpeechExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddMillisecondsSentToGoogleSpeech.expectations = append(mmAddMillisecondsSentToGoogleSpeech.expectations, expectation)
	return expectation
}

// Then sets up Metrics.AddMillisecondsSentToGoogleSpeech return parameters for the expectation previously defined by the When method

func (e *MetricsMockAddMillisecondsSentToGoogleSpeechExpectation) Then() *MetricsMock {
	return e.mock
}

// Times sets number of times Metrics.AddMillisecondsSentToGoogleSpeech should be invoked
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) Times(n uint64) *mMetricsMockAddMillisecondsSentToGoogleSpeech {
	if n == 0 {
		mmAddMillisecondsSentToGoogleSpeech.mock.t.Fatalf("Times of MetricsMock.AddMillisecondsSentToGoogleSpeech mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddMillisecondsSentToGoogleSpeech.expectedInvocations, n)
	mmAddMillisecondsSentToGoogleSpeech.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddMillisecondsSentToGoogleSpeech
}

func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) invocationsDone() bool {
	if len(mmAddMillisecondsSentToGoogleSpeech.expectations) == 0 && mmAddMillisecondsSentToGoogleSpeech.defaultExpectation == nil && mmAddMillisecondsSentToGoogleSpeech.mock.funcAddMillisecondsSentToGoogleSpeech == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddMillisecondsSentToGoogleSpeech.mock.afterAddMillisecondsSentToGoogleSpeechCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddMillisecondsSentToGoogleSpeech.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddMillisecondsSentToGoogleSpeech implements Metrics
func (mmAddMillisecondsSentToGoogleSpeech *MetricsMock) AddMillisecondsSentToGoogleSpeech(ms int) {
	mm_atomic.AddUint64(&mmAddMillisecondsSentToGoogleSpeech.beforeAddMillisecondsSentToGoogleSpeechCounter, 1)
	defer mm_atomic.AddUint64(&mmAddMillisecondsSentToGoogleSpeech.afterAddMillisecondsSentToGoogleSpeechCounter, 1)

	mmAddMillisecondsSentToGoogleSpeech.t.Helper()

	if mmAddMillisecondsSentToGoogleSpeech.inspectFuncAddMillisecondsSentToGoogleSpeech != nil {
		mmAddMillisecondsSentToGoogleSpeech.inspectFuncAddMillisecondsSentToGoogleSpeech(ms)
	}

	mm_params := MetricsMockAddMillisecondsSentToGoogleSpeechParams{ms}

	// Record call args
	mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.mutex.Lock()
	mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.callArgs = append(mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.callArgs, &mm_params)
	mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.mutex.Unlock()

	for _, e := range mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.Counter, 1)
		mm_want := mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.params
		mm_want_ptrs := mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.paramPtrs

		mm_got := MetricsMockAddMillisecondsSentToGoogleSpeechParams{ms}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ms != nil && !minimock.Equal(*mm_want_ptrs.ms, mm_got.ms) {
				mmAddMillisecondsSentToGoogleSpeech.t.Errorf("MetricsMock.AddMillisecondsSentToGoogleSpeech got unexpected parameter ms, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.expectationOrigins.originMs, *mm_want_ptrs.ms, mm_got.ms, minimock.Diff(*mm_want_ptrs.ms, mm_got.ms))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddMillisecondsSentToGoogleSpeech.t.Errorf("MetricsMock.AddMillisecondsSentToGoogleSpeech got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddMillisecondsSentToGoogleSpeech.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddMillisecondsSentToGoogleSpeech.funcAddMillisecondsSentToGoogleSpeech != nil {
		mmAddMillisecondsSentToGoogleSpeech.funcAddMillisecondsSentToGoogleSpeech(ms)
		return
	}
	mmAddMillisecondsSentToGoogleSpeech.t.Fatalf("Unexpected call to MetricsMock.AddMillisecondsSentToGoogleSpeech. %v", ms)

}

// AddMillisecondsSentToGoogleSpeechAfterCounter returns a count of finished MetricsMock.AddMillisecondsSentToGoogleSpeech invocations
func (mmAddMillisecondsSentToGoogleSpeech *MetricsMock) AddMillisecondsSentToGoogleSpeechAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddMillisecondsSentToGoogleSpeech.afterAddMillisecondsSentToGoogleSpeechCounter)
}

// AddMillisecondsSentToGoogleSpeechBeforeCounter returns a count of MetricsMock.AddMillisecondsSentToGoogleSpeech invocations
func (mmAddMillisecondsSentToGoogleSpeech *MetricsMock) AddMillisecondsSentToGoogleSpeechBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddMillisecondsSentToGoogleSpeech.beforeAddMillisecondsSentToGoogleSpeechCounter)
}

// Calls returns a list of arguments used in each call to MetricsMock.AddMillisecondsSentToGoogleSpeech.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddMillisecondsSentToGoogleSpeech *mMetricsMockAddMillisecondsSentToGoogleSpeech) Calls() []*MetricsMockAddMillisecondsSentToGoogleSpeechParams {
	mmAddMillisecondsSentToGoogleSpeech.mutex.RLock()

	argCopy := make([]*MetricsMockAddMillisecondsSentToGoogleSpeechParams, len(mmAddMillisecondsSentToGoogleSpeech.callArgs))
	copy(argCopy, mmAddMillisecondsSentToGoogleSpeech.callArgs)

	mmAddMillisecondsSentToGoogleSpeech.mutex.RUnlock()

	return argCopy
}

// MinimockAddMillisecondsSentToGoogleSpeechDone returns true if the count of the AddMillisecondsSentToGoogleSpeech invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockAddMillisecondsSentToGoogleSpeechDone() bool {
	if m.AddMillisecondsSentToGoogleSpeechMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddMillisecondsSentToGoogleSpeechMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddMillisecondsSentToGoogleSpeechMock.invocationsDone()
}

// MinimockAddMillisecondsSentToGoogleSpeechInspect logs each unmet expectation
func (m *MetricsMock) MinimockAddMillisecondsSentToGoogleSpeechInspect() {
	for _, e := range m.AddMillisecondsSentToGoogleSpeechMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsMock.AddMillisecondsSentToGoogleSpeech at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddMillisecondsSentToGoogleSpeechCounter := mm_atomic.LoadUint64(&m.afterAddMillisecondsSentToGoogleSpeechCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation != nil && afterAddMillisecondsSentToGoogleSpeechCounter < 1 {
		if m.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetricsMock.AddMillisecondsSentToGoogleSpeech at\n%s", m.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetricsMock.AddMillisecondsSentToGoogleSpeech at\n%s with params: %#v", m.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.expectationOrigins.origin, *m.AddMillisecondsSentToGoogleSpeechMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddMillisecondsSentToGoogleSpeech != nil && afterAddMillisecondsSentToGoogleSpeechCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.AddMillisecondsSentToGoogleSpeech at\n%s", m.funcAddMillisecondsSentToGoogleSpeechOrigin)
	}

	if !m.AddMillisecondsSentToGoogleSpeechMock.invocationsDone() && afterAddMillisecondsSentToGoogleSpeechCounter > 0 {
		m.t.Errorf("Expected %d calls to MetricsMock.AddMillisecondsSentToGoogleSpeech at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddMillisecondsSentToGoogleSpeechMock.expectedInvocations), m.AddMillisecondsSentToGoogleSpeechMock.expectedInvocationsOrigin, afterAddMillisecondsSentToGoogleSpeechCounter)
	}
}

type mMetricsMockWritePrometheus struct {
	optional           bool
	mock               *MetricsMock
	defaultExpectation *MetricsMockWritePrometheusExpectation
	expectations       []*MetricsMockWritePrometheusExpectation

	callArgs []*MetricsMockWritePrometheusParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetricsMockWritePrometheusExpectation specifies expectation struct of the Metrics.WritePrometheus
type MetricsMockWritePrometheusExpectation struct {
	mock               *MetricsMock
	params             *MetricsMockWritePrometheusParams
	paramPtrs          *MetricsMockWritePrometheusParamPtrs
	expectationOrigins MetricsMockWritePrometheusExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// MetricsMockWritePrometheusParams contains parameters of the Metrics.WritePrometheus
type MetricsMockWritePrometheusParams struct {
	w io.Writer
}

// MetricsMockWritePrometheusParamPtrs contains pointers to parameters of the Metrics.WritePrometheus
type MetricsMockWritePrometheusParamPtrs struct {
	w *io.Writer
}

// MetricsMockWritePrometheusOrigins contains origins of expectations of the Metrics.WritePrometheus
type MetricsMockWritePrometheusExpectationOrigins struct {
	origin  string
	originW string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWritePrometheus *mMetricsMockWritePrometheus) Optional() *mMetricsMockWritePrometheus {
	mmWritePrometheus.optional = true
	return mmWritePrometheus
}

// Expect sets up expected params for Metrics.WritePrometheus
func (mmWritePrometheus *mMetricsMockWritePrometheus) Expect(w io.Writer) *mMetricsMockWritePrometheus {
	if mmWritePrometheus.mock.funcWritePrometheus != nil {
		mmWritePrometheus.mock.t.Fatalf("MetricsMock.WritePrometheus mock is already set by Set")
	}

	if mmWritePrometheus.defaultExpectation == nil {
		mmWritePrometheus.defaultExpectation = &MetricsMockWritePrometheusExpectation{}
	}

	if mmWritePrometheus.defaultExpectation.paramPtrs != nil {
		mmWritePrometheus.mock.t.Fatalf("MetricsMock.WritePrometheus mock is already set by ExpectParams functions")
	}

	mmWritePrometheus.defaultExpectation.params = &MetricsMockWritePrometheusParams{w}
	mmWritePrometheus.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWritePrometheus.expectations {
		if minimock.Equal(e.params, mmWritePrometheus.defaultExpectation.params) {
			mmWritePrometheus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWritePrometheus.defaultExpectation.params)
		}
	}

	return mmWritePrometheus
}

// ExpectWParam1 sets up expected param w for Metrics.WritePrometheus
func (mmWritePrometheus *mMetricsMockWritePrometheus) ExpectWParam1(w io.Writer) *mMetricsMockWritePrometheus {
	if mmWritePrometheus.mock.funcWritePrometheus != nil {
		mmWritePrometheus.mock.t.Fatalf("MetricsMock.WritePrometheus mock is already set by Set")
	}

	if mmWritePrometheus.defaultExpectation == nil {
		mmWritePrometheus.defaultExpectation = &MetricsMockWritePrometheusExpectation{}
	}

	if mmWritePrometheus.defaultExpectation.params != nil {
		mmWritePrometheus.mock.t.Fatalf("MetricsMock.WritePrometheus mock is already set by Expect")
	}

	if mmWritePrometheus.defaultExpectation.paramPtrs == nil {
		mmWritePrometheus.defaultExpectation.paramPtrs = &MetricsMockWritePrometheusParamPtrs{}
	}
	mmWritePrometheus.defaultExpectation.paramPtrs.w = &w
	mmWritePrometheus.defaultExpectation.expectationOrigins.originW = minimock.CallerInfo(1)

	return mmWritePrometheus
}

// Inspect accepts an inspector function that has same arguments as the Metrics.WritePrometheus
func (mmWritePrometheus *mMetricsMockWritePrometheus) Inspect(f func(w io.Writer)) *mMetricsMockWritePrometheus {
	if mmWritePrometheus.mock.inspectFuncWritePrometheus != nil {
		mmWritePrometheus.mock.t.Fatalf("Inspect function is already set for MetricsMock.WritePrometheus")
	}

	mmWritePrometheus.mock.inspectFuncWritePrometheus = f

	return mmWritePrometheus
}

// Return sets up results that will be returned by Metrics.WritePrometheus
func (mmWritePrometheus *mMetricsMockWritePrometheus) Return() *MetricsMock {
	if mmWritePrometheus.mock.funcWritePrometheus != nil {
		mmWritePrometheus.mock.t.Fatalf("MetricsMock.WritePrometheus mock is already set by Set")
	}

	if mmWritePrometheus.defaultExpectation == nil {
		mmWritePrometheus.defaultExpectation = &MetricsMockWritePrometheusExpectation{mock: mmWritePrometheus.mock}
	}

	mmWritePrometheus.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWritePrometheus.mock
}

// Set uses given function f to mock the Metrics.WritePrometheus method
func (mmWritePrometheus *mMetricsMockWritePrometheus) Set(f func(w io.Writer)) *MetricsMock {
	if mmWritePrometheus.defaultExpectation != nil {
		mmWritePrometheus.mock.t.Fatalf("Default expectation is already set for the Metrics.WritePrometheus method")
	}

	if len(mmWritePrometheus.expectations) > 0 {
		mmWritePrometheus.mock.t.Fatalf("Some expectations are already set for the Metrics.WritePrometheus method")
	}

	mmWritePrometheus.mock.funcWritePrometheus = f
	mmWritePrometheus.mock.funcWritePrometheusOrigin = minimock.CallerInfo(1)
	return mmWritePrometheus.mock
}

// When sets expectation for the Metrics.WritePrometheus which will trigger the result defined by the following
// Then helper
func (mmWritePrometheus *mMetricsMockWritePrometheus) When(w io.Writer) *MetricsMockWritePrometheusExpectation {
	if mmWritePrometheus.mock.funcWritePrometheus != nil {
		mmWritePrometheus.mock.t.Fatalf("MetricsMock.WritePrometheus mock is already set by Set")
	}

	expectation := &MetricsMockWritePrometheusExpectation{
		mock:               mmWritePrometheus.mock,
		params:             &MetricsMockWritePrometheusParams{w},
		expectationOrigins: MetricsMockWritePrometheusExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWritePrometheus.expectations = append(mmWritePrometheus.expectations, expectation)
	return expectation
}

// Then sets up Metrics.WritePrometheus return parameters for the expectation previously defined by the When method

func (e *MetricsMockWritePrometheusExpectation) Then() *MetricsMock {
	return e.mock
}

// Times sets number of times Metrics.WritePrometheus should be invoked
func (mmWritePrometheus *mMetricsMockWritePrometheus) Times(n uint64) *mMetricsMockWritePrometheus {
	if n == 0 {
		mmWritePrometheus.mock.t.Fatalf("Times of MetricsMock.WritePrometheus mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWritePrometheus.expectedInvocations, n)
	mmWritePrometheus.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWritePrometheus
}

func (mmWritePrometheus *mMetricsMockWritePrometheus) invocationsDone() bool {
	if len(mmWritePrometheus.expectations) == 0 && mmWritePrometheus.defaultExpectation == nil && mmWritePrometheus.mock.funcWritePrometheus == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWritePrometheus.mock.afterWritePrometheusCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWritePrometheus.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WritePrometheus implements Metrics
func (mmWritePrometheus *MetricsMock) WritePrometheus(w io.Writer) {
	mm_atomic.AddUint64(&mmWritePrometheus.beforeWritePrometheusCounter, 1)
	defer mm_atomic.AddUint64(&mmWritePrometheus.afterWritePrometheusCounter, 1)

	mmWritePrometheus.t.Helper()

	if mmWritePrometheus.inspectFuncWritePrometheus != nil {
		mmWritePrometheus.inspectFuncWritePrometheus(w)
	}

	mm_params := MetricsMockWritePrometheusParams{w}

	// Record call args
	mmWritePrometheus.WritePrometheusMock.mutex.Lock()
	mmWritePrometheus.WritePrometheusMock.callArgs = append(mmWritePrometheus.WritePrometheusMock.callArgs, &mm_params)
	mmWritePrometheus.WritePrometheusMock.mutex.Unlock()

	for _, e := range mmWritePrometheus.WritePrometheusMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmWritePrometheus.WritePrometheusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWritePrometheus.WritePrometheusMock.defaultExpectation.Counter, 1)
		mm_want := mmWritePrometheus.WritePrometheusMock.defaultExpectation.params
		mm_want_ptrs := mmWritePrometheus.WritePrometheusMock.defaultExpectation.paramPtrs

		mm_got := MetricsMockWritePrometheusParams{w}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.w != nil && !minimock.Equal(*mm_want_ptrs.w, mm_got.w) {
				mmWritePrometheus.t.Errorf("MetricsMock.WritePrometheus got unexpected parameter w, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWritePrometheus.WritePrometheusMock.defaultExpectation.expectationOrigins.originW, *mm_want_ptrs.w, mm_got.w, minimock.Diff(*mm_want_ptrs.w, mm_got.w))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWritePrometheus.t.Errorf("MetricsMock.WritePrometheus got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWritePrometheus.WritePrometheusMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmWritePrometheus.funcWritePrometheus != nil {
		mmWritePrometheus.funcWritePrometheus(w)
		return
	}
	mmWritePrometheus.t.Fatalf("Unexpected call to MetricsMock.WritePrometheus. %v", w)

}

// WritePrometheusAfterCounter returns a count of finished MetricsMock.WritePrometheus invocations
func (mmWritePrometheus *MetricsMock) WritePrometheusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWritePrometheus.afterWritePrometheusCounter)
}

// WritePrometheusBeforeCounter returns a count of MetricsMock.WritePrometheus invocations
func (mmWritePrometheus *MetricsMock) WritePrometheusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWritePrometheus.beforeWritePrometheusCounter)
}

// Calls returns a list of arguments used in each call to MetricsMock.WritePrometheus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWritePrometheus *mMetricsMockWritePrometheus) Calls() []*MetricsMockWritePrometheusParams {
	mmWritePrometheus.mutex.RLock()

	argCopy := make([]*MetricsMockWritePrometheusParams, len(mmWritePrometheus.callArgs))
	copy(argCopy, mmWritePrometheus.callArgs)

	mmWritePrometheus.mutex.RUnlock()

	return argCopy
}

// MinimockWritePrometheusDone returns true if the count of the WritePrometheus invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockWritePrometheusDone() bool {
	if m.WritePrometheusMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WritePrometheusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WritePrometheusMock.invocationsDone()
}

// MinimockWritePrometheusInspect logs each unmet expectation
func (m *MetricsMock) MinimockWritePrometheusInspect() {
	for _, e := range m.WritePrometheusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsMock.WritePrometheus at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWritePrometheusCounter := mm_atomic.LoadUint64(&m.afterWritePrometheusCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WritePrometheusMock.defaultExpectation != nil && afterWritePrometheusCounter < 1 {
		if m.WritePrometheusMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetricsMock.WritePrometheus at\n%s", m.WritePrometheusMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetricsMock.WritePrometheus at\n%s with params: %#v", m.WritePrometheusMock.defaultExpectation.expectationOrigins.origin, *m.WritePrometheusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWritePrometheus != nil && afterWritePrometheusCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.WritePrometheus at\n%s", m.funcWritePrometheusOrigin)
	}

	if !m.WritePrometheusMock.invocationsDone() && afterWritePrometheusCounter > 0 {
		m.t.Errorf("Expected %d calls to MetricsMock.WritePrometheus at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WritePrometheusMock.expectedInvocations), m.WritePrometheusMock.expectedInvocationsOrigin, afterWritePrometheusCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MetricsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddBytesReadFromAudioInspect()

			m.MinimockAddBytesSentToGoogleSpeechInspect()

			m.MinimockAddBytesWrittenOnDiskInspect()

			m.MinimockAddConnectionsToGoogleSpeechInspect()

			m.MinimockAddMillisecondsSentToGoogleSpeechInspect()

			m.MinimockWritePrometheusInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MetricsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MetricsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddBytesReadFromAudioDone() &&
		m.MinimockAddBytesSentToGoogleSpeechDone() &&
		m.MinimockAddBytesWrittenOnDiskDone() &&
		m.MinimockAddConnectionsToGoogleSpeechDone() &&
		m.MinimockAddMillisecondsSentToGoogleSpeechDone() &&
		m.MinimockWritePrometheusDone()
}
