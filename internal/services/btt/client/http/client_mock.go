// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package http

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ClientMock implements Client
type ClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSend          func(ctx context.Context, method string, jsonPayload map[string]any, extraPayload map[string]string) (ba1 []byte, err error)
	funcSendOrigin    string
	inspectFuncSend   func(ctx context.Context, method string, jsonPayload map[string]any, extraPayload map[string]string)
	afterSendCounter  uint64
	beforeSendCounter uint64
	SendMock          mClientMockSend
}

// NewClientMock returns a mock for Client
func NewClientMock(t minimock.Tester) *ClientMock {
	m := &ClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendMock = mClientMockSend{mock: m}
	m.SendMock.callArgs = []*ClientMockSendParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mClientMockSend struct {
	optional           bool
	mock               *ClientMock
	defaultExpectation *ClientMockSendExpectation
	expectations       []*ClientMockSendExpectation

	callArgs []*ClientMockSendParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ClientMockSendExpectation specifies expectation struct of the Client.Send
type ClientMockSendExpectation struct {
	mock               *ClientMock
	params             *ClientMockSendParams
	paramPtrs          *ClientMockSendParamPtrs
	expectationOrigins ClientMockSendExpectationOrigins
	results            *ClientMockSendResults
	returnOrigin       string
	Counter            uint64
}

// ClientMockSendParams contains parameters of the Client.Send
type ClientMockSendParams struct {
	ctx          context.Context
	method       string
	jsonPayload  map[string]any
	extraPayload map[string]string
}

// ClientMockSendParamPtrs contains pointers to parameters of the Client.Send
type ClientMockSendParamPtrs struct {
	ctx          *context.Context
	method       *string
	jsonPayload  *map[string]any
	extraPayload *map[string]string
}

// ClientMockSendResults contains results of the Client.Send
type ClientMockSendResults struct {
	ba1 []byte
	err error
}

// ClientMockSendOrigins contains origins of expectations of the Client.Send
type ClientMockSendExpectationOrigins struct {
	origin             string
	originCtx          string
	originMethod       string
	originJsonPayload  string
	originExtraPayload string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSend *mClientMockSend) Optional() *mClientMockSend {
	mmSend.optional = true
	return mmSend
}

// Expect sets up expected params for Client.Send
func (mmSend *mClientMockSend) Expect(ctx context.Context, method string, jsonPayload map[string]any, extraPayload map[string]string) *mClientMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &ClientMockSendExpectation{}
	}

	if mmSend.defaultExpectation.paramPtrs != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by ExpectParams functions")
	}

	mmSend.defaultExpectation.params = &ClientMockSendParams{ctx, method, jsonPayload, extraPayload}
	mmSend.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSend.expectations {
		if minimock.Equal(e.params, mmSend.defaultExpectation.params) {
			mmSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSend.defaultExpectation.params)
		}
	}

	return mmSend
}

// ExpectCtxParam1 sets up expected param ctx for Client.Send
func (mmSend *mClientMockSend) ExpectCtxParam1(ctx context.Context) *mClientMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &ClientMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &ClientMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.ctx = &ctx
	mmSend.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSend
}

// ExpectMethodParam2 sets up expected param method for Client.Send
func (mmSend *mClientMockSend) ExpectMethodParam2(method string) *mClientMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &ClientMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &ClientMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.method = &method
	mmSend.defaultExpectation.expectationOrigins.originMethod = minimock.CallerInfo(1)

	return mmSend
}

// ExpectJsonPayloadParam3 sets up expected param jsonPayload for Client.Send
func (mmSend *mClientMockSend) ExpectJsonPayloadParam3(jsonPayload map[string]any) *mClientMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &ClientMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &ClientMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.jsonPayload = &jsonPayload
	mmSend.defaultExpectation.expectationOrigins.originJsonPayload = minimock.CallerInfo(1)

	return mmSend
}

// ExpectExtraPayloadParam4 sets up expected param extraPayload for Client.Send
func (mmSend *mClientMockSend) ExpectExtraPayloadParam4(extraPayload map[string]string) *mClientMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &ClientMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &ClientMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.extraPayload = &extraPayload
	mmSend.defaultExpectation.expectationOrigins.originExtraPayload = minimock.CallerInfo(1)

	return mmSend
}

// Inspect accepts an inspector function that has same arguments as the Client.Send
func (mmSend *mClientMockSend) Inspect(f func(ctx context.Context, method string, jsonPayload map[string]any, extraPayload map[string]string)) *mClientMockSend {
	if mmSend.mock.inspectFuncSend != nil {
		mmSend.mock.t.Fatalf("Inspect function is already set for ClientMock.Send")
	}

	mmSend.mock.inspectFuncSend = f

	return mmSend
}

// Return sets up results that will be returned by Client.Send
func (mmSend *mClientMockSend) Return(ba1 []byte, err error) *ClientMock {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &ClientMockSendExpectation{mock: mmSend.mock}
	}
	mmSend.defaultExpectation.results = &ClientMockSendResults{ba1, err}
	mmSend.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// Set uses given function f to mock the Client.Send method
func (mmSend *mClientMockSend) Set(f func(ctx context.Context, method string, jsonPayload map[string]any, extraPayload map[string]string) (ba1 []byte, err error)) *ClientMock {
	if mmSend.defaultExpectation != nil {
		mmSend.mock.t.Fatalf("Default expectation is already set for the Client.Send method")
	}

	if len(mmSend.expectations) > 0 {
		mmSend.mock.t.Fatalf("Some expectations are already set for the Client.Send method")
	}

	mmSend.mock.funcSend = f
	mmSend.mock.funcSendOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// When sets expectation for the Client.Send which will trigger the result defined by the following
// Then helper
func (mmSend *mClientMockSend) When(ctx context.Context, method string, jsonPayload map[string]any, extraPayload map[string]string) *ClientMockSendExpectation {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("ClientMock.Send mock is already set by Set")
	}

	expectation := &ClientMockSendExpectation{
		mock:               mmSend.mock,
		params:             &ClientMockSendParams{ctx, method, jsonPayload, extraPayload},
		expectationOrigins: ClientMockSendExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSend.expectations = append(mmSend.expectations, expectation)
	return expectation
}

// Then sets up Client.Send return parameters for the expectation previously defined by the When method
func (e *ClientMockSendExpectation) Then(ba1 []byte, err error) *ClientMock {
	e.results = &ClientMockSendResults{ba1, err}
	return e.mock
}

// Times sets number of times Client.Send should be invoked
func (mmSend *mClientMockSend) Times(n uint64) *mClientMockSend {
	if n == 0 {
		mmSend.mock.t.Fatalf("Times of ClientMock.Send mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSend.expectedInvocations, n)
	mmSend.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSend
}

func (mmSend *mClientMockSend) invocationsDone() bool {
	if len(mmSend.expectations) == 0 && mmSend.defaultExpectation == nil && mmSend.mock.funcSend == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSend.mock.afterSendCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSend.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Send implements Client
func (mmSend *ClientMock) Send(ctx context.Context, method string, jsonPayload map[string]any, extraPayload map[string]string) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmSend.beforeSendCounter, 1)
	defer mm_atomic.AddUint64(&mmSend.afterSendCounter, 1)

	mmSend.t.Helper()

	if mmSend.inspectFuncSend != nil {
		mmSend.inspectFuncSend(ctx, method, jsonPayload, extraPayload)
	}

	mm_params := ClientMockSendParams{ctx, method, jsonPayload, extraPayload}

	// Record call args
	mmSend.SendMock.mutex.Lock()
	mmSend.SendMock.callArgs = append(mmSend.SendMock.callArgs, &mm_params)
	mmSend.SendMock.mutex.Unlock()

	for _, e := range mmSend.SendMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmSend.SendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSend.SendMock.defaultExpectation.Counter, 1)
		mm_want := mmSend.SendMock.defaultExpectation.params
		mm_want_ptrs := mmSend.SendMock.defaultExpectation.paramPtrs

		mm_got := ClientMockSendParams{ctx, method, jsonPayload, extraPayload}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSend.t.Errorf("ClientMock.Send got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.method != nil && !minimock.Equal(*mm_want_ptrs.method, mm_got.method) {
				mmSend.t.Errorf("ClientMock.Send got unexpected parameter method, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originMethod, *mm_want_ptrs.method, mm_got.method, minimock.Diff(*mm_want_ptrs.method, mm_got.method))
			}

			if mm_want_ptrs.jsonPayload != nil && !minimock.Equal(*mm_want_ptrs.jsonPayload, mm_got.jsonPayload) {
				mmSend.t.Errorf("ClientMock.Send got unexpected parameter jsonPayload, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originJsonPayload, *mm_want_ptrs.jsonPayload, mm_got.jsonPayload, minimock.Diff(*mm_want_ptrs.jsonPayload, mm_got.jsonPayload))
			}

			if mm_want_ptrs.extraPayload != nil && !minimock.Equal(*mm_want_ptrs.extraPayload, mm_got.extraPayload) {
				mmSend.t.Errorf("ClientMock.Send got unexpected parameter extraPayload, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originExtraPayload, *mm_want_ptrs.extraPayload, mm_got.extraPayload, minimock.Diff(*mm_want_ptrs.extraPayload, mm_got.extraPayload))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSend.t.Errorf("ClientMock.Send got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSend.SendMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSend.SendMock.defaultExpectation.results
		if mm_results == nil {
			mmSend.t.Fatal("No results are set for the ClientMock.Send")
		}
		return (*mm_results).ba1, (*mm_results).err
	}
	if mmSend.funcSend != nil {
		return mmSend.funcSend(ctx, method, jsonPayload, extraPayload)
	}
	mmSend.t.Fatalf("Unexpected call to ClientMock.Send. %v %v %v %v", ctx, method, jsonPayload, extraPayload)
	return
}

// SendAfterCounter returns a count of finished ClientMock.Send invocations
func (mmSend *ClientMock) SendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.afterSendCounter)
}

// SendBeforeCounter returns a count of ClientMock.Send invocations
func (mmSend *ClientMock) SendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.beforeSendCounter)
}

// Calls returns a list of arguments used in each call to ClientMock.Send.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSend *mClientMockSend) Calls() []*ClientMockSendParams {
	mmSend.mutex.RLock()

	argCopy := make([]*ClientMockSendParams, len(mmSend.callArgs))
	copy(argCopy, mmSend.callArgs)

	mmSend.mutex.RUnlock()

	return argCopy
}

// MinimockSendDone returns true if the count of the Send invocations corresponds
// the number of defined expectations
func (m *ClientMock) MinimockSendDone() bool {
	if m.SendMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMock.invocationsDone()
}

// MinimockSendInspect logs each unmet expectation
func (m *ClientMock) MinimockSendInspect() {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientMock.Send at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendCounter := mm_atomic.LoadUint64(&m.afterSendCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && afterSendCounter < 1 {
		if m.SendMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ClientMock.Send at\n%s", m.SendMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ClientMock.Send at\n%s with params: %#v", m.SendMock.defaultExpectation.expectationOrigins.origin, *m.SendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && afterSendCounter < 1 {
		m.t.Errorf("Expected call to ClientMock.Send at\n%s", m.funcSendOrigin)
	}

	if !m.SendMock.invocationsDone() && afterSendCounter > 0 {
		m.t.Errorf("Expected %d calls to ClientMock.Send at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMock.expectedInvocations), m.SendMock.expectedInvocationsOrigin, afterSendCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendDone()
}
