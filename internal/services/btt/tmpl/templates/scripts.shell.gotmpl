{{- define "health-check" }}
ok=$(curl -sSLf "http://{{ .AppAddress }}/api/health" 2>/dev/null)
[[ -z "${ok}" ]] && echo "‚ö†Ô∏è {{ .AppName}} is not running!" && exit 1
{{- end }}

{{- define "print_status" }}
{{- template "log" . }}

ok=$(curl -sSLf "http://{{ .AppAddress }}/api/health")
[[ -z "${ok}" ]] && echo "‚ö†Ô∏è" && exit 0
is_running=$(curl -sSLf "http://{{ .AppAddress }}/api/btt/is-running")
[[ "${is_running}" == "true" ]] && echo "üî¥" || echo "‚úÖ"
{{- end }}

{{- define "print_selected_device" }}
{{- template "log" . }}
{{- template "health-check" . }}

device=$(curl -sSLf 'http://{{ .AppAddress }}/api/btt/selected-device')
[[ -z "${device}" ]] && echo "‚ö†Ô∏è No device selected" || echo "‚úÖ ${device}"
{{- end }}

{{- define "print_selected_language" }}
{{- template "log" . }}
{{- template "health-check" . }}

language=$(curl -sSLf 'http://{{ .AppAddress }}/api/btt/selected-language')
[[ -z "${language}" ]] && echo "‚ö†Ô∏è No language selected" || echo "‚úÖ ${language}"
{{- end }}

{{- define "print_selected_view_mode" }}
{{- template "log" . }}
{{- template "health-check" . }}

view_mode=$(curl -sSLf 'http://{{ .AppAddress }}/api/btt/selected-view-mode')
[[ -z "${view_mode}" ]] && echo "‚ö†Ô∏è No view mode selected" || echo "‚úÖ ${view_mode}"
{{- end }}

{{- define "print_selected_floating" }}
{{- template "log" . }}
{{- template "health-check" . }}

floating=$(curl -sSLf 'http://{{ .AppAddress }}/api/btt/selected-floating')
[[ -z "${floating}" ]] && echo "‚ö†Ô∏è No floating state selected" || echo "‚úÖ ${floating}"
{{- end }}

{{- define "print_selected_clipboard" }}
{{- template "log" . }}
{{- template "health-check" . }}

clipboard=$(curl -sSLf 'http://{{ .AppAddress }}/api/btt/selected-clipboard')
[[ -z "${clipboard}" ]] && echo "‚ö†Ô∏è No clipboard selected" || echo "‚úÖ ${clipboard}"
{{- end }}

{{- define "select_device" }}
{{- template "log" . }}

curl -X POST -H 'Content-Type: application/json' -sSLf --data-raw '{"device": "{{ .Device }}"}' \
  http://{{ .AppAddress }}/api/btt/select-device
{{- end }}

{{- define "select_language" }}
{{- template "log" . }}

curl -X POST -H 'Content-Type: application/json' -sSLf --data-raw '{"language": "{{ .Language }}"}' \
  http://{{ .AppAddress }}/api/btt/select-language
{{- end }}

{{- define "select_view_mode" }}
{{- template "log" . }}

curl -X POST -H 'Content-Type: application/json' -sSLf --data-raw '{"view_mode": "{{ .ViewMode }}"}' \
  http://{{ .AppAddress }}/api/btt/select-view-mode
{{- end }}

{{- define "select_floating" }}
{{- template "log" . }}

curl -X POST -H 'Content-Type: application/json' -sSLf --data-raw '{"floating": "{{ .Floating }}"}' \
  http://{{ .AppAddress }}/api/btt/select-floating
{{- end }}

{{- define "select_clipboard" }}
{{- template "log" . }}

curl -X POST -H 'Content-Type: application/json' -sSLf --data-raw '{"clipboard": "{{ .Clipboard }}"}' \
  http://{{ .AppAddress }}/api/btt/select-clipboard
{{- end }}


{{- define "open_settings" }}
{{- template "log" . }}

# Must not rely on the app
curl -sSLf http://{{ .BttAddress }}/trigger_action/?{{ .Query }}
curl -sSLf -X POST http://{{ .AppAddress }}/api/btt/load-devices
{{- end }}

{{- define "close_settings" }}
{{- template "log" . }}

is_running=$(curl -sSLf http://{{ .AppAddress }}/api/btt/is-running)
view_mode=$(curl -sSLf http://{{ .AppAddress }}/api/btt/selected-view-mode)
close_group_query="{{ .CloseGroupQuery }}"
open_clean_view_query="{{ .OpenCleanViewQuery }}"
[[ "true" == "${is_running}" && "{{ .CleanViewMode }}" == "${view_mode}" ]] && query="${open_clean_view_query}" || query="${close_group_query}"

# Must not rely on the app
curl -sSLf "http://{{ .BttAddress }}/trigger_action/?${query}"
{{- end }}

{{- define "toggle" }}
{{- template "log" . }}
{{- template "health-check" . }}

curl -X POST -sSLf "http://{{ .AppAddress }}/api/btt/toggle-listening"
{{- end }}

{{- define "listen_socket" }}
text="$(nc -U "{{ .SocketPath }}")"
[[ -n "${text}" ]] && echo "${text}" || echo "(no text recognized)"
{{- end }}

{{- define "app_placeholder" }}
echo "{{ .AppName}} App"
{{- end }}

{{- define "copy_text" }}
{{- template "log" . }}
text=$(curl -sSLf http://{{ .AppAddress }}/api/btt/text)
[[ -z "${text}" ]] && exit 0
echo -n "${text}" | tr $'\n' ' ' | pbcopy
osascript -e "display notification \"Text copied\" with title \"{{ .AppName}}\""
{{- end }}


