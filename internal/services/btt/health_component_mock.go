// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package btt

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HealthComponentMock implements HealthComponent
type HealthComponentMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcHealth          func(ctx context.Context) (b1 bool)
	funcHealthOrigin    string
	inspectFuncHealth   func(ctx context.Context)
	afterHealthCounter  uint64
	beforeHealthCounter uint64
	HealthMock          mHealthComponentMockHealth
}

// NewHealthComponentMock returns a mock for HealthComponent
func NewHealthComponentMock(t minimock.Tester) *HealthComponentMock {
	m := &HealthComponentMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HealthMock = mHealthComponentMockHealth{mock: m}
	m.HealthMock.callArgs = []*HealthComponentMockHealthParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHealthComponentMockHealth struct {
	optional           bool
	mock               *HealthComponentMock
	defaultExpectation *HealthComponentMockHealthExpectation
	expectations       []*HealthComponentMockHealthExpectation

	callArgs []*HealthComponentMockHealthParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HealthComponentMockHealthExpectation specifies expectation struct of the HealthComponent.Health
type HealthComponentMockHealthExpectation struct {
	mock               *HealthComponentMock
	params             *HealthComponentMockHealthParams
	paramPtrs          *HealthComponentMockHealthParamPtrs
	expectationOrigins HealthComponentMockHealthExpectationOrigins
	results            *HealthComponentMockHealthResults
	returnOrigin       string
	Counter            uint64
}

// HealthComponentMockHealthParams contains parameters of the HealthComponent.Health
type HealthComponentMockHealthParams struct {
	ctx context.Context
}

// HealthComponentMockHealthParamPtrs contains pointers to parameters of the HealthComponent.Health
type HealthComponentMockHealthParamPtrs struct {
	ctx *context.Context
}

// HealthComponentMockHealthResults contains results of the HealthComponent.Health
type HealthComponentMockHealthResults struct {
	b1 bool
}

// HealthComponentMockHealthOrigins contains origins of expectations of the HealthComponent.Health
type HealthComponentMockHealthExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHealth *mHealthComponentMockHealth) Optional() *mHealthComponentMockHealth {
	mmHealth.optional = true
	return mmHealth
}

// Expect sets up expected params for HealthComponent.Health
func (mmHealth *mHealthComponentMockHealth) Expect(ctx context.Context) *mHealthComponentMockHealth {
	if mmHealth.mock.funcHealth != nil {
		mmHealth.mock.t.Fatalf("HealthComponentMock.Health mock is already set by Set")
	}

	if mmHealth.defaultExpectation == nil {
		mmHealth.defaultExpectation = &HealthComponentMockHealthExpectation{}
	}

	if mmHealth.defaultExpectation.paramPtrs != nil {
		mmHealth.mock.t.Fatalf("HealthComponentMock.Health mock is already set by ExpectParams functions")
	}

	mmHealth.defaultExpectation.params = &HealthComponentMockHealthParams{ctx}
	mmHealth.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmHealth.expectations {
		if minimock.Equal(e.params, mmHealth.defaultExpectation.params) {
			mmHealth.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHealth.defaultExpectation.params)
		}
	}

	return mmHealth
}

// ExpectCtxParam1 sets up expected param ctx for HealthComponent.Health
func (mmHealth *mHealthComponentMockHealth) ExpectCtxParam1(ctx context.Context) *mHealthComponentMockHealth {
	if mmHealth.mock.funcHealth != nil {
		mmHealth.mock.t.Fatalf("HealthComponentMock.Health mock is already set by Set")
	}

	if mmHealth.defaultExpectation == nil {
		mmHealth.defaultExpectation = &HealthComponentMockHealthExpectation{}
	}

	if mmHealth.defaultExpectation.params != nil {
		mmHealth.mock.t.Fatalf("HealthComponentMock.Health mock is already set by Expect")
	}

	if mmHealth.defaultExpectation.paramPtrs == nil {
		mmHealth.defaultExpectation.paramPtrs = &HealthComponentMockHealthParamPtrs{}
	}
	mmHealth.defaultExpectation.paramPtrs.ctx = &ctx
	mmHealth.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmHealth
}

// Inspect accepts an inspector function that has same arguments as the HealthComponent.Health
func (mmHealth *mHealthComponentMockHealth) Inspect(f func(ctx context.Context)) *mHealthComponentMockHealth {
	if mmHealth.mock.inspectFuncHealth != nil {
		mmHealth.mock.t.Fatalf("Inspect function is already set for HealthComponentMock.Health")
	}

	mmHealth.mock.inspectFuncHealth = f

	return mmHealth
}

// Return sets up results that will be returned by HealthComponent.Health
func (mmHealth *mHealthComponentMockHealth) Return(b1 bool) *HealthComponentMock {
	if mmHealth.mock.funcHealth != nil {
		mmHealth.mock.t.Fatalf("HealthComponentMock.Health mock is already set by Set")
	}

	if mmHealth.defaultExpectation == nil {
		mmHealth.defaultExpectation = &HealthComponentMockHealthExpectation{mock: mmHealth.mock}
	}
	mmHealth.defaultExpectation.results = &HealthComponentMockHealthResults{b1}
	mmHealth.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmHealth.mock
}

// Set uses given function f to mock the HealthComponent.Health method
func (mmHealth *mHealthComponentMockHealth) Set(f func(ctx context.Context) (b1 bool)) *HealthComponentMock {
	if mmHealth.defaultExpectation != nil {
		mmHealth.mock.t.Fatalf("Default expectation is already set for the HealthComponent.Health method")
	}

	if len(mmHealth.expectations) > 0 {
		mmHealth.mock.t.Fatalf("Some expectations are already set for the HealthComponent.Health method")
	}

	mmHealth.mock.funcHealth = f
	mmHealth.mock.funcHealthOrigin = minimock.CallerInfo(1)
	return mmHealth.mock
}

// When sets expectation for the HealthComponent.Health which will trigger the result defined by the following
// Then helper
func (mmHealth *mHealthComponentMockHealth) When(ctx context.Context) *HealthComponentMockHealthExpectation {
	if mmHealth.mock.funcHealth != nil {
		mmHealth.mock.t.Fatalf("HealthComponentMock.Health mock is already set by Set")
	}

	expectation := &HealthComponentMockHealthExpectation{
		mock:               mmHealth.mock,
		params:             &HealthComponentMockHealthParams{ctx},
		expectationOrigins: HealthComponentMockHealthExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmHealth.expectations = append(mmHealth.expectations, expectation)
	return expectation
}

// Then sets up HealthComponent.Health return parameters for the expectation previously defined by the When method
func (e *HealthComponentMockHealthExpectation) Then(b1 bool) *HealthComponentMock {
	e.results = &HealthComponentMockHealthResults{b1}
	return e.mock
}

// Times sets number of times HealthComponent.Health should be invoked
func (mmHealth *mHealthComponentMockHealth) Times(n uint64) *mHealthComponentMockHealth {
	if n == 0 {
		mmHealth.mock.t.Fatalf("Times of HealthComponentMock.Health mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHealth.expectedInvocations, n)
	mmHealth.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmHealth
}

func (mmHealth *mHealthComponentMockHealth) invocationsDone() bool {
	if len(mmHealth.expectations) == 0 && mmHealth.defaultExpectation == nil && mmHealth.mock.funcHealth == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHealth.mock.afterHealthCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHealth.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Health implements HealthComponent
func (mmHealth *HealthComponentMock) Health(ctx context.Context) (b1 bool) {
	mm_atomic.AddUint64(&mmHealth.beforeHealthCounter, 1)
	defer mm_atomic.AddUint64(&mmHealth.afterHealthCounter, 1)

	mmHealth.t.Helper()

	if mmHealth.inspectFuncHealth != nil {
		mmHealth.inspectFuncHealth(ctx)
	}

	mm_params := HealthComponentMockHealthParams{ctx}

	// Record call args
	mmHealth.HealthMock.mutex.Lock()
	mmHealth.HealthMock.callArgs = append(mmHealth.HealthMock.callArgs, &mm_params)
	mmHealth.HealthMock.mutex.Unlock()

	for _, e := range mmHealth.HealthMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmHealth.HealthMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHealth.HealthMock.defaultExpectation.Counter, 1)
		mm_want := mmHealth.HealthMock.defaultExpectation.params
		mm_want_ptrs := mmHealth.HealthMock.defaultExpectation.paramPtrs

		mm_got := HealthComponentMockHealthParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmHealth.t.Errorf("HealthComponentMock.Health got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHealth.HealthMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHealth.t.Errorf("HealthComponentMock.Health got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmHealth.HealthMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHealth.HealthMock.defaultExpectation.results
		if mm_results == nil {
			mmHealth.t.Fatal("No results are set for the HealthComponentMock.Health")
		}
		return (*mm_results).b1
	}
	if mmHealth.funcHealth != nil {
		return mmHealth.funcHealth(ctx)
	}
	mmHealth.t.Fatalf("Unexpected call to HealthComponentMock.Health. %v", ctx)
	return
}

// HealthAfterCounter returns a count of finished HealthComponentMock.Health invocations
func (mmHealth *HealthComponentMock) HealthAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHealth.afterHealthCounter)
}

// HealthBeforeCounter returns a count of HealthComponentMock.Health invocations
func (mmHealth *HealthComponentMock) HealthBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHealth.beforeHealthCounter)
}

// Calls returns a list of arguments used in each call to HealthComponentMock.Health.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHealth *mHealthComponentMockHealth) Calls() []*HealthComponentMockHealthParams {
	mmHealth.mutex.RLock()

	argCopy := make([]*HealthComponentMockHealthParams, len(mmHealth.callArgs))
	copy(argCopy, mmHealth.callArgs)

	mmHealth.mutex.RUnlock()

	return argCopy
}

// MinimockHealthDone returns true if the count of the Health invocations corresponds
// the number of defined expectations
func (m *HealthComponentMock) MinimockHealthDone() bool {
	if m.HealthMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HealthMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HealthMock.invocationsDone()
}

// MinimockHealthInspect logs each unmet expectation
func (m *HealthComponentMock) MinimockHealthInspect() {
	for _, e := range m.HealthMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HealthComponentMock.Health at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterHealthCounter := mm_atomic.LoadUint64(&m.afterHealthCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HealthMock.defaultExpectation != nil && afterHealthCounter < 1 {
		if m.HealthMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HealthComponentMock.Health at\n%s", m.HealthMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HealthComponentMock.Health at\n%s with params: %#v", m.HealthMock.defaultExpectation.expectationOrigins.origin, *m.HealthMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHealth != nil && afterHealthCounter < 1 {
		m.t.Errorf("Expected call to HealthComponentMock.Health at\n%s", m.funcHealthOrigin)
	}

	if !m.HealthMock.invocationsDone() && afterHealthCounter > 0 {
		m.t.Errorf("Expected %d calls to HealthComponentMock.Health at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.HealthMock.expectedInvocations), m.HealthMock.expectedInvocationsOrigin, afterHealthCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HealthComponentMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockHealthInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HealthComponentMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HealthComponentMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHealthDone()
}
